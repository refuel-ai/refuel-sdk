{"version":3,"file":"index.mjs","sources":["../src/Applications/index.ts","../src/DatasetExports/index.ts","../src/DatasetItems/index.ts","../src/Datasets/index.ts","../src/FinetunedModels/index.ts","../src/Integrations/index.ts","../src/Labels/index.ts","../src/Projects/index.ts","../src/consts.ts","../src/RefuelBase/index.ts","../src/TaskModels/index.ts","../src/TaskRuns/index.ts","../src/Tasks/index.ts","../src/Taxonomies/index.ts","../src/TaxonomyLabels/index.ts","../src/Team/index.ts","../src/TeamModels/index.ts","../src/Usage/index.ts","../src/Users/index.ts","../src/types.ts","../src/index.ts"],"sourcesContent":["import { RefuelBase } from \"../RefuelBase\";\nimport {\n    Application,\n    ApplicationCreateOptions,\n    ApplicationLabelOptions,\n    ApplicationLabelResponse,\n    ApplicationOutputAsync,\n    ApplicationOutputSync,\n    Dataset,\n} from \"../types\";\n\n/**\n * Handles operations related to applications.\n * This class is not intended to be instantiated directly.\n * Instead, access it through an instance of the Refuel class.\n */\nexport class Applications {\n    private readonly base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    /**\n     * Deploy a specific task as an application\n     *\n     * @example\n     * ```ts\n     * const application = await refuel.applications.create({\n     *     projectId,\n     *     taskId,\n     * });\n     * ```\n     */\n    async create(options: ApplicationCreateOptions): Promise<Application> {\n        const params = new URLSearchParams();\n        params.append(\"task_id\", options.taskId);\n\n        if (options.name) {\n            params.append(\"name\", options.name);\n        }\n\n        return this.base.request<Application>(\n            `/projects/${options.projectId}/applications?${params.toString()}`,\n            {\n                method: \"POST\",\n            }\n        );\n    }\n\n    /**\n     * Get an application by ID\n     *\n     * @example\n     * ```ts\n     * const application = await refuel.applications.get(applicationId);\n     * ```\n     */\n    async get(applicationId: string): Promise<Application> {\n        return this.base.request<Application>(`/applications/${applicationId}`);\n    }\n\n    /**\n     * List all applications\n     *\n     * @example\n     * ```ts\n     * const applications = await refuel.applications.list();\n     * ```\n     */\n    async list(projectId?: string): Promise<Application[]> {\n        const endpoint = projectId\n            ? `/projects/${projectId}/applications`\n            : \"/applications\";\n\n        return this.base.request<Application[]>(endpoint);\n    }\n\n    /**\n     * Delete a deployed application\n     *\n     * @example\n     * ```ts\n     * await refuel.applications.delete(applicationId);\n     * ```\n     */\n    async delete(applicationId: string): Promise<void> {\n        return this.base.request<void>(`/applications/${applicationId}`, {\n            method: \"DELETE\",\n        });\n    }\n\n    /**\n     * Get labels for a specific item\n     *\n     * @example\n     * ```ts\n     * const labeledItem = await refuel.applications.getLabeledItem(\n     *     applicationId,\n     *     itemId,\n     * );\n     * ```\n     */\n    async getLabeledItem<FieldKeys extends string>(\n        applicationId: string,\n        itemId: string\n    ) {\n        return this.base.request<\n            ApplicationLabelResponse<ApplicationOutputSync<FieldKeys>>\n        >(`/applications/${applicationId}/items/${itemId}`);\n    }\n\n    /**\n     * Labels an item with your application\n     *\n     * @example\n     * Label an item and console log the values\n     * ```ts\n     * const dataToLabel = [\n     *     {\n     *         menu_text: \"Grilled chicken sandwich with avocado and chipotle mayo\",\n     *     },\n     * ];\n     *\n     * const labeledItem = await refuel.applications.label(\n     *     applicationId,\n     *     dataToLabel,\n     * );\n     * console.log(labeledItem); // output label values\n     * ```\n     *\n     * @example\n     * You can also trigger the label processing to happen asynchronously\n     * ```ts\n     * const response = await refuel.applications.label(\n     *     applicationId,\n     *     dataToLabel,\n     *     { async: true }\n     * );\n     *\n     * const labeledItem = await refuel.applications.getLabeledItem(\n     *     response.application_id,\n     *     response.refuel_output[0].refuel_uuid,\n     * );\n     *\n     * console.log(labeledItem); // output label values\n     * ```\n     */\n    async label<\n        FieldKeys extends string,\n        A extends boolean | undefined = undefined\n    >(\n        applicationId: string,\n        data: Record<string, unknown>[],\n        options?: ApplicationLabelOptions & { async?: A }\n    ) {\n        const params = new URLSearchParams();\n        if (options?.modelId) {\n            params.append(\"model_id\", options.modelId);\n        }\n\n        if (options?.explain !== undefined) {\n            params.append(\"explain\", options.explain.toString());\n        }\n\n        if (options?.redactPII !== undefined) {\n            params.append(\"redact_pii\", options.redactPII.toString());\n        }\n\n        if (options?.async !== undefined) {\n            params.append(\"is_async\", options.async.toString());\n        }\n\n        return this.base.request<\n            A extends true\n                ? ApplicationLabelResponse<ApplicationOutputAsync>\n                : ApplicationLabelResponse<ApplicationOutputSync<FieldKeys>>,\n            Record<string, unknown>[]\n        >(`/applications/${applicationId}/label?${params.toString()}`, {\n            method: \"POST\",\n            data,\n        });\n    }\n\n    /**\n     * Provide the correct label for an item\n     *\n     * @example\n     * ```ts\n     * const correctLabelData = {\n     *     vegetarian: \"no\",\n     * };\n     *\n     * await refuel.applications.feedback(\n     *     applicationId,\n     *     itemId,\n     *     correctLabelData,\n     * );\n     * ```\n     */\n    async feedback(\n        applicationId: string,\n        itemId: string,\n        correctLabelData: Record<string, string>\n    ) {\n        const application = await this.get(applicationId);\n\n        const subtaskMap = Object.fromEntries(\n            application.subtasks?.map((subtask) => [\n                subtask.name,\n                subtask.id,\n            ]) ?? []\n        );\n\n        const feedbackData: Record<string, { label: string }> = {};\n        for (const [subtaskName, subtaskLabel] of Object.entries(\n            correctLabelData\n        )) {\n            const subtaskId = subtaskMap[subtaskName];\n            if (!subtaskId) {\n                throw new Error(`Invalid field: ${subtaskName}`);\n            }\n            feedbackData[subtaskId] = { label: subtaskLabel };\n        }\n\n        return this.base.request<Dataset>(\n            `/applications/${applicationId}/items/${itemId}/label`,\n            {\n                method: \"POST\",\n                data: feedbackData,\n            }\n        );\n    }\n}\n","import { RefuelBase } from \"../RefuelBase\";\nimport { ExportDatasetOptions, ExportDatasetResponse } from \"../types\";\n\n/**\n * Handles operations related to dataset exports.\n * This class is not intended to be instantiated directly.\n * Instead, access it through an instance of the Refuel class.\n */\nexport class DatasetExports {\n    private readonly base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    /**\n     * Get the URL of a dataset export\n     *\n     * @example\n     * ```ts\n     * const export = await refuel.datasetExports.get(exportId, datasetId);\n     * ```\n     */\n    async get(exportId: string, datasetId: string): Promise<string> {\n        return this.base.request<string>(\n            `/datasets/${datasetId}/exports/${exportId}`\n        );\n    }\n\n    /**\n     * Email a secure, expiring link to download a dataset\n     *\n     * @example\n     * ```ts\n     * const export = await refuel.datasetExports.create(datasetId, { email: \"example@example.com\" });\n     * ```\n     */\n    async create(\n        datasetId: string,\n        options?: ExportDatasetOptions\n    ): Promise<ExportDatasetResponse> {\n        const params = new URLSearchParams();\n\n        if (options?.email) {\n            params.append(\"email\", options.email);\n        }\n\n        if (options?.taskId) {\n            params.append(\"task_id\", options.taskId);\n        }\n\n        if (options?.includeUUID !== undefined) {\n            params.append(\"include_uuid\", options.includeUUID.toString());\n        }\n\n        if (options?.includeLabels !== undefined) {\n            params.append(\"include_labels\", options.includeLabels.toString());\n        }\n\n        if (options?.taskRunId) {\n            params.append(\"task_run_id\", options.taskRunId);\n        }\n\n        if (Array.isArray(options?.filters)) {\n            options.filters.forEach((filter) => {\n                params.append(\"filters\", JSON.stringify(filter));\n            });\n        }\n\n        return this.base.request<ExportDatasetResponse>(\n            `/datasets/${datasetId}/exports?${params.toString()}`,\n            {\n                method: \"POST\",\n            }\n        );\n    }\n}\n","import { RefuelBase } from \"../RefuelBase\";\nimport { Dataset, DatasetItemsOptions } from \"../types\";\n\nexport class DatasetItems {\n    private readonly base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    /**\n     * Add data to a dataset\n     *\n     * @example\n     * ```ts\n     * const dataset = await refuel.datasetItems.create(datasetId, [{ \"name\": \"John Doe\" }, { \"name\": \"Jane Doe\" }]);\n     * ```\n     */\n    async create(\n        datasetId: string,\n        data: Record<string, unknown>[]\n    ): Promise<Dataset> {\n        return this.base.request<Dataset>(`/datasets/${datasetId}/items`, {\n            method: \"POST\",\n            data,\n        });\n    }\n\n    /**\n     * Get a dataset item by ID\n     *\n     * @example\n     * ```ts\n     * const item = await refuel.datasetItems.get(datasetId, itemId);\n     * ```\n     */\n    async get(\n        datasetId: string,\n        itemId: string\n    ): Promise<Record<string, string>> {\n        return (\n            await this.base.request<Record<string, string>[]>(\n                `/datasets/${datasetId}/items/${itemId}`\n            )\n        )[0];\n    }\n\n    async list(\n        datasetId: string,\n        options?: DatasetItemsOptions\n    ): Promise<Dataset[]> {\n        const params = new URLSearchParams();\n\n        if (options?.filters) {\n            options.filters.forEach((filter) => {\n                params.append(\"filters\", JSON.stringify(filter));\n            });\n        }\n\n        if (options?.maxItems) {\n            params.append(\"max_items\", options.maxItems.toString());\n        }\n\n        if (options?.orderBy) {\n            options.orderBy.forEach((orderBy) => {\n                params.append(\"order_bys\", orderBy);\n            });\n        }\n\n        if (options?.offset) {\n            params.append(\"offset\", options.offset.toString());\n        }\n\n        return this.base.request<Dataset[]>(\n            `/datasets/${datasetId}?${params.toString()}`\n        );\n    }\n\n    /**\n     * Delete a dataset item\n     *\n     * @example\n     * ```ts\n     * await refuel.datasetItems.delete(datasetId, itemId);\n     * ```\n     */\n    async delete(datasetId: string, itemId: string): Promise<void> {\n        return this.base.request<void>(\n            `/datasets/${datasetId}/items/${itemId}`,\n            {\n                method: \"DELETE\",\n            }\n        );\n    }\n}\n","import { RefuelBase } from \"../RefuelBase\";\nimport { Dataset, DatasetFromList } from \"../types\";\n\n/**\n * Handles operations related to datasets.\n * This class is not intended to be instantiated directly.\n * Instead, access it through an instance of the Refuel class.\n */\nexport class Datasets {\n    private readonly base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    /**\n     * Get a dataset by ID\n     *\n     * @example\n     * ```ts\n     * const dataset = await refuel.datasets.get(datasetId);\n     * ```\n     */\n    async get(datasetId: string): Promise<Dataset> {\n        return this.base.request<Dataset>(`/datasets/${datasetId}`);\n    }\n\n    /**\n     * List all datasets\n     *\n     * @example\n     * ```ts\n     * const datasets = await refuel.datasets.list();\n     * ```\n     */\n    async list(projectId?: string): Promise<DatasetFromList[]> {\n        const params = new URLSearchParams();\n\n        if (projectId) {\n            params.append(\"project_id\", projectId);\n        }\n\n        return this.base.request<DatasetFromList[]>(\n            `/datasets?${params.toString()}`\n        );\n    }\n\n    /**\n     * Delete a dataset\n     *\n     * @example\n     * ```ts\n     * await refuel.datasets.delete(datasetId);\n     * ```\n     */\n    async delete(datasetId: string): Promise<void> {\n        return this.base.request<void>(`/datasets/${datasetId}`, {\n            method: \"DELETE\",\n        });\n    }\n}\n","import { RefuelBase } from \"../RefuelBase\";\nimport { LabelingModel, FinetunedModelCreateOptions } from \"../types\";\n\nexport class FinetunedModels {\n    private base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    /**\n     * Create a new finetuned model\n     *\n     * @example\n     * ```ts\n     * const model = await refuel.finetunedModels.create({\n     *     project_id: \"c4a7d428-3c8d-4e39-b887-6f3ad8d23f1c\",\n     *     task_id: \"9b2e7f15-6d4a-4c31-b518-3a69e0f98d42\",\n     *     datasets: [\"c4a7d428-3c8d-4e39-b887-6f3ad8d23f1c\"],\n     *     base_model: \"refuel-llm-2-large\",\n     *     augmented_finetuning_model: \"gpt-4o\",\n     *     hyperparameters: {\n     *         learning_rate_multiplier: 20,\n     *         num_epochs: 10,\n     *         lora_r: 32,\n     *     },\n     *     lora: true,\n     * });\n     * ```\n     */\n    async create(data: FinetunedModelCreateOptions): Promise<LabelingModel> {\n        return this.base.request<LabelingModel>(\n            `/projects/${data.project_id}/finetuned_models`,\n            {\n                method: \"POST\",\n                data,\n            }\n        );\n    }\n\n    /**\n     * Get a finetuned model by ID\n     *\n     * @example\n     * ```ts\n     * const model = await refuel.finetunedModels.get(modelId);\n     * ```\n     */\n    async get(modelId: string): Promise<LabelingModel> {\n        return this.base.request<LabelingModel>(`/finetuned_models/${modelId}`);\n    }\n\n    /**\n     * List all finetuned models for a project or task\n     *\n     * @example\n     * ```ts\n     * const models = await refuel.finetunedModels.list(projectId);\n     * ```\n     */\n    async list(projectId: string, taskId?: string): Promise<LabelingModel[]> {\n        const params = new URLSearchParams();\n        if (taskId) {\n            params.append(\"task_id\", taskId);\n        }\n\n        return this.base.request<LabelingModel[]>(\n            `/projects/${projectId}/finetuned_models?${params.toString()}`\n        );\n    }\n\n    async update(\n        modelId: string,\n        data: Partial<LabelingModel>\n    ): Promise<LabelingModel> {\n        return this.base.request<LabelingModel, Partial<LabelingModel>>(\n            `/finetuned_models/${modelId}`,\n            {\n                method: \"PATCH\",\n                data,\n            }\n        );\n    }\n\n    /**\n     * Delete a finetuned model\n     *\n     * @example\n     * ```ts\n     * await refuel.finetunedModels.delete(modelId);\n     * ```\n     */\n    async delete(modelId: string): Promise<void> {\n        return this.base.request<void>(`/finetuned_models/${modelId}`, {\n            method: \"DELETE\",\n        });\n    }\n}\n","import { RefuelBase } from \"../RefuelBase\";\nimport { Integration } from \"../types\";\n\n/**\n * Handles operations related to third party integrations.\n * This class is not intended to be instantiated directly.\n * Instead, access it through an instance of the Refuel class.\n */\nexport class Integrations {\n    private base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    /**\n     * Get a third party integration by ID\n     *\n     * @example\n     * ```ts\n     * const integration = await refuel.integrations.get(integrationId);\n     * ```\n     */\n    async get(integrationId: string): Promise<Integration> {\n        return this.base.request<Integration>(`/integrations/${integrationId}`);\n    }\n\n    /**\n     * List all third party integrations\n     *\n     * @example\n     * ```ts\n     * const integrations = await refuel.integrations.list();\n     * ```\n     */\n    async list(): Promise<Integration[]> {\n        return this.base.request<Integration[]>(\"/integrations\");\n    }\n\n    /**\n     * Update a third party integration\n     *\n     * @example\n     * ```ts\n     * const integration = await refuel.integrations.update(integrationId, { is_connected: false });\n     * ```\n     */\n    async update(\n        integrationId: string,\n        data: Partial<Integration>\n    ): Promise<Integration> {\n        return this.base.request<Integration, Partial<Integration>>(\n            `/integrations/${integrationId}`,\n            {\n                method: \"PATCH\",\n                data,\n            }\n        );\n    }\n}\n","import { RefuelBase } from \"../RefuelBase\";\nimport {\n    Dataset,\n    DatasetItemLabels,\n    DatasetItemLabelsUpdate,\n    LabelListOptions,\n} from \"../types\";\n\n/**\n * Handles operations related to labels.\n * This class is not intended to be instantiated directly.\n * Instead, access it through an instance of the Refuel class.\n */\nexport class Labels {\n    private base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    private getLabelsFromResponse(response: Dataset): DatasetItemLabels {\n        const labels = response.items[0].labels;\n\n        if (!labels) {\n            throw new Error(\"No labels found\");\n        }\n\n        return labels;\n    }\n\n    /**\n     * List all labels for a dataset item\n     *\n     * @example\n     * ```ts\n     * const labels = await refuel.labels.list(taskId, datasetId, itemId);\n     * ```\n     */\n    async list(\n        taskId: string,\n        datasetId: string,\n        itemId: string,\n        options?: LabelListOptions\n    ): Promise<DatasetItemLabels> {\n        const params = new URLSearchParams();\n\n        if (options?.modelId) {\n            params.append(\"model_id\", options.modelId);\n        }\n\n        if (options?.subtaskId) {\n            params.append(\"subtask_id\", options.subtaskId);\n        }\n\n        if (typeof options?.generateMissingLabels === \"boolean\") {\n            params.append(\n                \"generate_missing_labels\",\n                options.generateMissingLabels.toString()\n            );\n        }\n\n        if (typeof options?.generateMissingExplanations === \"boolean\") {\n            params.append(\n                \"generate_missing_explanations\",\n                options.generateMissingExplanations.toString()\n            );\n        }\n\n        const response = await this.base.request<Dataset>(\n            `/tasks/${taskId}/datasets/${datasetId}/items/${itemId}/label?${params.toString()}`\n        );\n\n        return this.getLabelsFromResponse(response);\n    }\n\n    /**\n     * Update labels for a dataset item\n     *\n     * @example\n     * ```ts\n     * const labels = await refuel.labels.update(taskId, datasetId, itemId, { \"subtask_id\": \"label_value\" });\n     * ```\n     */\n    async update(\n        taskId: string,\n        datasetId: string,\n        itemId: string,\n        labels: DatasetItemLabelsUpdate\n    ): Promise<DatasetItemLabels> {\n        const response = await this.base.request<Dataset>(\n            `/tasks/${taskId}/datasets/${datasetId}/items/${itemId}/label`,\n            {\n                method: \"POST\",\n                data: labels,\n            }\n        );\n\n        return this.getLabelsFromResponse(response);\n    }\n\n    /**\n     * Approve labels for a dataset item\n     *\n     * @example\n     * ```ts\n     * const labels = await refuel.labels.approve(taskId, datasetId, itemId, subtaskId);\n     * ```\n     */\n    async approve(\n        taskId: string,\n        datasetId: string,\n        itemId: string,\n        options?: {\n            subtaskId?: string;\n            modelId?: string;\n        }\n    ): Promise<DatasetItemLabels> {\n        const existingLabels = await this.list(\n            taskId,\n            datasetId,\n            itemId,\n            options\n        );\n\n        let updatedLabels: DatasetItemLabelsUpdate = {};\n\n        if (options?.subtaskId) {\n            const existingSubtaskLabels = existingLabels[options.subtaskId];\n\n            if (!existingSubtaskLabels) {\n                throw new Error(\n                    `No labels found for subtask ${options.subtaskId}`\n                );\n            }\n\n            updatedLabels[options.subtaskId] = existingSubtaskLabels;\n        } else {\n            updatedLabels = existingLabels;\n        }\n\n        return this.update(taskId, datasetId, itemId, updatedLabels);\n    }\n\n    async generateExplanations(\n        taskId: string,\n        datasetId: string,\n        itemId: string,\n        options?: {\n            subtaskId?: string;\n            modelId?: string;\n        }\n    ): Promise<DatasetItemLabels> {\n        const params = new URLSearchParams();\n        params.append(\"generate_missing_explanations\", \"true\");\n\n        if (options?.subtaskId) {\n            params.append(\"subtask_id\", options.subtaskId);\n        }\n\n        if (options?.modelId) {\n            params.append(\"model_id\", options.modelId);\n        }\n\n        const response = await this.base.request<Dataset>(\n            `/tasks/${taskId}/datasets/${datasetId}/items/${itemId}/label?${params.toString()}`\n        );\n\n        return this.getLabelsFromResponse(response);\n    }\n}\n","import { RefuelBase } from \"../RefuelBase\";\nimport { Project, ProjectData } from \"../types\";\n\n/**\n * Handles operations related to projects.\n * This class is not intended to be instantiated directly.\n * Instead, access it through an instance of the Refuel class.\n */\nexport class Projects {\n    private base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    /**\n     * Create a new project\n     *\n     * @example\n     * ```ts\n     * const project = await refuel.projects.create({\n     *     project_name: \"My Project\",\n     * });\n     * ```\n     */\n    async create(data: ProjectData): Promise<Project> {\n        const params = new URLSearchParams();\n        params.append(\"project_name\", data.project_name);\n        params.append(\"description\", data.description || \"\");\n\n        return this.base.request<Project>(`/projects?${params.toString()}`, {\n            method: \"POST\",\n            data,\n        });\n    }\n\n    /**\n     * Get a project by ID\n     *\n     * @example\n     * ```ts\n     * const project = await refuel.projects.get(projectId);\n     * ```\n     */\n    async get(projectId: string): Promise<Project> {\n        return this.base.request<Project>(`/projects/${projectId}`);\n    }\n\n    /**\n     * List all projects\n     *\n     * @example\n     * ```ts\n     * const projects = await refuel.projects.list();\n     * ```\n     */\n    async list(): Promise<Project[]> {\n        return this.base.request<Project[]>(\"/projects\");\n    }\n\n    /**\n     * Delete a project and all associated resources\n     *\n     * @example\n     * ```ts\n     * await refuel.projects.delete(projectId);\n     * ```\n     */\n    async delete(projectId: string): Promise<void> {\n        return this.base.request<void>(`/projects/${projectId}`, {\n            method: \"DELETE\",\n        });\n    }\n}\n","export const DEFAULT_BASE_URL = \"https://cloud-api.refuel.ai\";\nexport const DEFAULT_MAX_RETRIES = 5;\nexport const DEFAULT_INITIAL_RETRY_TIMEOUT = 2_500;\nexport const DEFAULT_RETRY_STATUS_CODES = [202, 429, 504];\n","import {\n    DEFAULT_BASE_URL,\n    DEFAULT_MAX_RETRIES,\n    DEFAULT_RETRY_STATUS_CODES,\n    DEFAULT_INITIAL_RETRY_TIMEOUT,\n} from \"../consts\";\nimport { RefuelOptions, RequestOptions } from \"../types\";\n\nexport class RefuelAPIError extends Error {\n    constructor(\n        public readonly response?: Response,\n        public readonly url: string | undefined = response?.url,\n        public readonly status: number | undefined = response?.status\n    ) {\n        super(`${response?.statusText || \"Network error\"} (${url})`);\n        this.name = \"RefuelAPIError\";\n    }\n}\n\n/** @internal */\nexport class RefuelBase {\n    protected readonly accessToken: string;\n    protected readonly baseUrl: string;\n    protected readonly maxRetries: number;\n    protected readonly initialRetryTimeout: number;\n    protected readonly retryStatusCodes: number[];\n\n    constructor(accessToken: string, options: RefuelOptions = {}) {\n        this.accessToken = accessToken;\n        this.baseUrl = options.baseUrl ?? DEFAULT_BASE_URL;\n        this.maxRetries = options.maxRetries ?? DEFAULT_MAX_RETRIES;\n        this.initialRetryTimeout =\n            options.initialRetryTimeout ?? DEFAULT_INITIAL_RETRY_TIMEOUT;\n        this.retryStatusCodes =\n            options.retryStatusCodes ?? DEFAULT_RETRY_STATUS_CODES;\n    }\n\n    public async request<Response, RequestBody = unknown>(\n        endpoint: string,\n        options?: RequestOptions<RequestBody>\n    ): Promise<Response> {\n        const {\n            method = \"GET\",\n            data,\n            maxRetries = this.maxRetries,\n            initialRetryTimeout = this.initialRetryTimeout,\n            retryStatusCodes = this.retryStatusCodes,\n        } = options || {};\n\n        const url = `${this.baseUrl}${endpoint}`;\n        const headers: HeadersInit = {\n            Authorization: `Bearer ${this.accessToken}`,\n        };\n\n        let body: BodyInit | undefined;\n\n        if (data instanceof FormData) {\n            body = data;\n        } else if (data) {\n            headers[\"Content-Type\"] = \"application/json\";\n            body = JSON.stringify(data);\n        }\n\n        let retries = 0;\n\n        while (true) {\n            let response: globalThis.Response | undefined = undefined;\n\n            try {\n                response = await fetch(url, {\n                    method,\n                    headers,\n                    body,\n                });\n            } catch {}\n\n            if (\n                method.toUpperCase() === \"GET\" &&\n                (!response || retryStatusCodes.includes(response.status))\n            ) {\n                if (retries >= maxRetries) {\n                    throw new RefuelAPIError(response, url);\n                }\n                // Proceed to retry logic\n            } else if (!response?.ok) {\n                // Non-retriable error\n                throw new RefuelAPIError(response, url);\n            } else {\n                // Successful response\n                const responseJSON = await response.json();\n                return (responseJSON.data || responseJSON) as Response;\n            }\n\n            // Retry logic\n            // Calculate exponential backoff with jitter\n            const baseBackoff = initialRetryTimeout * Math.pow(2, retries);\n            const jitter = Math.random() * 1_000;\n            const backoffTime = baseBackoff + jitter;\n\n            // Wait for the calculated backoff time\n            await new Promise((resolve) => setTimeout(resolve, backoffTime));\n\n            retries += 1;\n        }\n    }\n}\n","import { RefuelBase } from \"../RefuelBase\";\nimport { LabelingModel } from \"../types\";\n\n/**\n * Handles operations related to labeling models.\n * This class is not intended to be instantiated directly.\n * Instead, access it through an instance of the Refuel class.\n */\nexport class TaskModels {\n    private base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    /**\n     * List all models available for a task\n     *\n     * @example\n     * ```ts\n     * const models = await refuel.taskModels.list(taskId);\n     * ```\n     */\n    async list(taskId: string): Promise<LabelingModel[]> {\n        const response = await this.base.request<{ models: LabelingModel[] }>(\n            `/tasks/${taskId}/models`\n        );\n        return response.models;\n    }\n}\n","import { RefuelBase } from \"../RefuelBase\";\nimport {\n    TaskRun,\n    TaskRunCancelOptions,\n    TaskRunCreateOptions,\n    TaskRunListOptions,\n} from \"../types\";\n\n/**\n * Handles operations related to task runs.\n * This class is not intended to be instantiated directly.\n * Instead, access it through an instance of the Refuel class.\n */\nexport class TaskRuns {\n    private base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    /**\n     * Create a task run\n     *\n     * @example\n     * ```ts\n     * const taskRun = await refuel.taskRuns.create(taskId, { datasetId });\n     * ```\n     */\n    async create(\n        taskId: string,\n        options?: TaskRunCreateOptions\n    ): Promise<TaskRun> {\n        if (!options?.datasetId && !options?.evalSet) {\n            throw new Error(\"Either datasetId or evalSet must be provided\");\n        }\n\n        const params = new URLSearchParams();\n\n        if (options?.limit) {\n            params.append(\"limit\", options.limit.toString());\n        }\n\n        if (options?.filters) {\n            options.filters.forEach((filter) => {\n                params.append(\"filters\", JSON.stringify(filter));\n            });\n        }\n\n        if (options?.modelIds?.length) {\n            options.modelIds.forEach((modelId) => {\n                params.append(\"model_ids\", modelId);\n            });\n        }\n\n        if (options?.datasetId) {\n            params.append(\"dataset_id\", options.datasetId);\n        }\n\n        const endpoint = options?.evalSet\n            ? `/tasks/${taskId}/evalset/runs?${params.toString()}`\n            : `/tasks/${taskId}/runs?${params.toString()}`;\n\n        return this.base.request<TaskRun>(endpoint, {\n            method: \"POST\",\n        });\n    }\n\n    /**\n     * Cancel a task run\n     *\n     * @example\n     * ```ts\n     * await refuel.taskRuns.cancel(taskId, { datasetId });\n     * ```\n     */\n    async cancel(taskId: string, options: TaskRunCancelOptions): Promise<void> {\n        if (!options.datasetId && !options.evalSet) {\n            throw new Error(\"Either datasetId or evalSet must be provided\");\n        }\n\n        const params = new URLSearchParams();\n\n        params.append(\"cancel_run\", \"true\");\n\n        if (options?.datasetId) {\n            params.append(\"dataset_id\", options.datasetId);\n        }\n\n        const endpoint = options?.evalSet\n            ? `/tasks/${taskId}/evalset/runs`\n            : `/tasks/${taskId}/runs?${params.toString()}`;\n\n        return this.base.request<void>(endpoint, {\n            method: \"POST\",\n        });\n    }\n\n    /**\n     * List all task runs\n     *\n     * @example\n     * ```ts\n     * const taskRuns = await refuel.taskRuns.list(taskId);\n     * ```\n     */\n    async list(\n        taskId: string,\n        options?: TaskRunListOptions\n    ): Promise<TaskRun[]> {\n        let endpoint = `/tasks/${taskId}/runs`;\n\n        if (options?.datasetId && options?.evalSet) {\n            throw new Error(\"Cannot provide both datasetId and evalSet\");\n        }\n\n        if (options?.datasetId) {\n            endpoint += `/${options.datasetId}`;\n        } else if (options?.evalSet) {\n            endpoint = `/tasks/${taskId}/evalset/runs`;\n        }\n\n        const response = await this.base.request<TaskRun | TaskRun[]>(endpoint);\n\n        if (Array.isArray(response)) {\n            return response;\n        }\n\n        return [response];\n    }\n}\n","import { RefuelBase } from \"../RefuelBase\";\nimport { Task } from \"../types\";\n\n/**\n * Handles operations related to tasks.\n * This class is not intended to be instantiated directly.\n * Instead, access it through an instance of the Refuel class.\n */\nexport class Tasks {\n    private readonly base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    /**\n     * Get a task by ID\n     *\n     * @example\n     * ```ts\n     * const task = await refuel.tasks.get(taskId);\n     * ```\n     */\n    async get(taskId: string): Promise<Task> {\n        return this.base.request<Task>(`/tasks/${taskId}`);\n    }\n\n    /**\n     * List all tasks\n     *\n     * @example\n     * ```ts\n     * const tasks = await refuel.tasks.list();\n     * ```\n     */\n    async list(projectId?: string): Promise<Tasks[]> {\n        const endpoint = projectId ? `/projects/${projectId}/tasks` : \"/tasks\";\n\n        return this.base.request<Tasks[]>(endpoint);\n    }\n\n    /**\n     * Update a task\n     *\n     * @example\n     * ```ts\n     * const task = await refuel.tasks.update(taskId, { name: \"New Name\" });\n     * ```\n     */\n    async update(taskId: string, data: Partial<Task>): Promise<Task> {\n        return this.base.request<Task, Partial<Task>>(`/tasks/${taskId}`, {\n            method: \"PATCH\",\n            data,\n        });\n    }\n\n    /**\n     * Delete a task\n     *\n     * @example\n     * ```ts\n     * await refuel.tasks.delete(taskId);\n     * ```\n     */\n    async delete(taskId: string): Promise<void> {\n        return this.base.request<void>(`/tasks/${taskId}`, {\n            method: \"DELETE\",\n        });\n    }\n}\n","import { RefuelBase } from \"../RefuelBase\";\nimport {\n    TaxonomyLabelData,\n    TaxonomyLabelRequestBody,\n    TaxonomyLabelsResponse,\n} from \"../types\";\n\n/**\n * Handles operations related to taxonomies.\n * This class is not intended to be instantiated directly.\n * Instead, access it through an instance of the Refuel class.\n */\nexport class Taxonomies {\n    private readonly base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    /**\n     * Create a taxonomy for a task\n     *\n     * @example\n     * ```ts\n     * const taxonomy = await refuel.taxonomies.create(taskId, [\n     *  { name: \"Label 1\" },\n     *  { name: \"Label 2\" },\n     * ]);\n     * ```\n     */\n    async create(\n        taskId: string,\n        labels: TaxonomyLabelData | TaxonomyLabelData[] = []\n    ): Promise<TaxonomyLabelsResponse> {\n        const data = {\n            labels: Array.isArray(labels) ? labels : [labels],\n        };\n\n        return this.base.request<\n            TaxonomyLabelsResponse,\n            TaxonomyLabelRequestBody\n        >(`/tasks/${taskId}/taxonomies`, {\n            method: \"POST\",\n            data,\n        });\n    }\n\n    async get(taskId: string, taxonomyId: string) {\n        return this.base.request<TaxonomyLabelsResponse>(\n            `/tasks/${taskId}/taxonomies/${taxonomyId}`\n        );\n    }\n\n    /**\n     * Delete a taxonomy\n     *\n     * @example\n     * ```ts\n     * await refuel.taxonomies.delete(taskId, taxonomyId);\n     * ```\n     */\n    async delete(taskId: string, taxonomyId: string): Promise<void> {\n        return this.base.request<void>(\n            `/tasks/${taskId}/taxonomies/${taxonomyId}`,\n            {\n                method: \"DELETE\",\n            }\n        );\n    }\n\n    /**\n     * Create a duplicate of an existing taxonomy\n     *\n     * @example\n     * ```ts\n     * const taxonomy = await refuel.taxonomies.duplicate(taskId, taxonomyId);\n     * ```\n     */\n    async duplicate(\n        taskId: string,\n        taxonomyId: string\n    ): Promise<TaxonomyLabelsResponse> {\n        return this.base.request<TaxonomyLabelsResponse>(\n            `/tasks/${taskId}/taxonomies/${taxonomyId}/duplicate`,\n            {\n                method: \"POST\",\n            }\n        );\n    }\n}\n","import { RefuelBase } from \"../RefuelBase\";\nimport {\n    TaxonomyLabelsResponse,\n    TaxonomyLabel,\n    TaxonomyLabelData,\n} from \"../types\";\n\n/**\n * Handles operations related to taxonomy labels.\n * This class is not intended to be instantiated directly.\n * Instead, access it through an instance of the Refuel class.\n */\nexport class TaxonomyLabels {\n    private readonly base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    /**\n     * Add labels to a taxonomy\n     *\n     * @example\n     * ```ts\n     * const label = await refuel.taxonomyLabels.create(taskId, taxonomyId, [\n     *  { name: \"Label 1\" },\n     *  { name: \"Label 2\" },\n     * ]);\n     * ```\n     */\n    async create(\n        taskId: string,\n        taxonomyId: string,\n        labels: TaxonomyLabelData | TaxonomyLabelData[]\n    ): Promise<void> {\n        const data = new FormData();\n\n        data.append(\n            \"labels\",\n            JSON.stringify(Array.isArray(labels) ? labels : [labels])\n        );\n\n        return this.base.request<void>(\n            `/tasks/${taskId}/taxonomies/${taxonomyId}`,\n            {\n                method: \"POST\",\n                data,\n            }\n        );\n    }\n\n    /**\n     * List all labels in a taxonomy\n     *\n     * @example\n     * ```ts\n     * const labels = await refuel.taxonomyLabels.list(taskId, taxonomyId);\n     * ```\n     */\n    async list(\n        taskId: string,\n        taxonomyId: string,\n        options?: {\n            filter?: string;\n            offset?: number;\n            maxItems?: number;\n        }\n    ): Promise<TaxonomyLabelsResponse> {\n        const params = new URLSearchParams();\n\n        if (options?.offset) {\n            params.append(\"offset\", options.offset.toString());\n        }\n\n        if (options?.maxItems) {\n            params.append(\"max_items\", options.maxItems.toString());\n        }\n\n        if (options?.filter) {\n            params.append(\"filter\", options?.filter);\n        }\n\n        return this.base.request<TaxonomyLabelsResponse>(\n            `/tasks/${taskId}/taxonomies/${taxonomyId}?${params.toString()}`\n        );\n    }\n\n    /**\n     * Update a label in a taxonomy\n     *\n     * @example\n     * ```ts\n     * const label = await refuel.taxonomyLabels.update(taskId, taxonomyId, labelId, { name: \"New Name\" });\n     * ```\n     */\n    async update(\n        taskId: string,\n        taxonomyId: string,\n        labelId: string,\n        data: Partial<TaxonomyLabelData>\n    ): Promise<TaxonomyLabel> {\n        return this.base.request<TaxonomyLabel>(\n            `/tasks/${taskId}/taxonomies/${taxonomyId}/labels/${labelId}`,\n            {\n                method: \"PATCH\",\n                data,\n            }\n        );\n    }\n\n    /**\n     * Delete a label from a taxonomy\n     *\n     * @example\n     * ```ts\n     * await refuel.taxonomyLabels.delete(taskId, taxonomyId, labelId);\n     * ```\n     */\n    async delete(\n        taskId: string,\n        taxonomyId: string,\n        labelId: string\n    ): Promise<void> {\n        return this.base.request<void>(\n            `/tasks/${taskId}/taxonomies/${taxonomyId}/labels/${labelId}`,\n            {\n                method: \"DELETE\",\n            }\n        );\n    }\n}\n","import { RefuelBase } from \"../RefuelBase\";\nimport { RefuelTeam } from \"../types\";\n\nexport class Team {\n    private readonly base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    /**\n     * Get the current team\n     *\n     * @example\n     * ```ts\n     * const team = await refuel.team.get();\n     * ```\n     */\n    async get(): Promise<RefuelTeam> {\n        return this.base.request<RefuelTeam>(\"/team\");\n    }\n\n    /**\n     * Regenerate the API key for the current team\n     *\n     * @example\n     * ```ts\n     * const apiKey = await refuel.team.regenerateApiKey();\n     * ```\n     */\n    async regenerateApiKey(): Promise<string> {\n        await this.base.request<void>(\"/team\", {\n            method: \"PATCH\",\n            data: {\n                update_api_key: true,\n            },\n        });\n\n        return (await this.get()).refuel_api_key;\n    }\n\n    /**\n     * Sign a URL\n     *\n     * @example\n     * ```ts\n     * const signedUrl = await refuel.team.signUrl(\"https://example.com\");\n     * ```\n     */\n    async signUrl(url: string): Promise<{ url: string }> {\n        const params = new URLSearchParams();\n        params.append(\"url\", url);\n\n        return this.base.request<{ url: string }>(\n            `/team/sign-url?${params.toString()}`\n        );\n    }\n}\n","import { RefuelBase } from \"../RefuelBase\";\nimport { TeamModel } from \"../types\";\n\nexport class TeamModels {\n    private base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    async list(): Promise<TeamModel[]> {\n        return this.base.request<TeamModel[]>(\"/models\");\n    }\n}\n","import { RefuelBase } from \"../RefuelBase\";\nimport { UsageData } from \"../types\";\n\nexport class Usage {\n    private readonly base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    /**\n     * Get usage data for a specific time period\n     *\n     * @example\n     * ```ts\n     * const usage = await refuel.usage.get(\"2024-01-01\", \"2024-01-31\");\n     * ```\n     */\n    async get(\n        startDate: string,\n        endDate: string,\n        options?: {\n            applicationId?: string;\n            taskId?: string;\n            modelId?: string;\n        }\n    ): Promise<UsageData> {\n        const params = new URLSearchParams();\n        params.append(\"start_date\", startDate);\n        params.append(\"end_date\", endDate);\n\n        if (options?.applicationId) {\n            params.append(\"application_id\", options.applicationId);\n        }\n\n        if (options?.taskId) {\n            params.append(\"task_id\", options.taskId);\n        }\n\n        if (options?.modelId) {\n            params.append(\"model\", options.modelId);\n        }\n\n        return this.base.request<UsageData>(`/usage?${params.toString()}`);\n    }\n}\n","import { RefuelBase } from \"../RefuelBase\";\nimport { InviteUsersResponse, User } from \"../types\";\n\n/**\n * Handles operations related to users.\n * This class is not intended to be instantiated directly.\n * Instead, access it through an instance of the Refuel class.\n */\nexport class Users {\n    private readonly base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    /**\n     * Invite users to your team\n     *\n     * @example\n     * ```ts\n     * const response = await refuel.users.create([\"user1@example.com\", \"user2@example.com\"]);\n     * ```\n     */\n    async create(email: string | string[]) {\n        const data = Array.isArray(email) ? email : [email];\n        return this.base.request<InviteUsersResponse, string[]>(\"/users\", {\n            method: \"POST\",\n            data,\n        });\n    }\n\n    /**\n     * Get a user by ID\n     *\n     * @example\n     * ```ts\n     * const user = await refuel.users.get(userId);\n     * ```\n     */\n    async get(userId: string): Promise<User> {\n        return this.base.request<User>(`/users/${userId}`);\n    }\n\n    /**\n     * List all users in your team\n     *\n     * @example\n     * ```ts\n     * const users = await refuel.users.list();\n     * ```\n     */\n    async list(): Promise<User[]> {\n        return this.base.request<User[]>(\"/users\");\n    }\n}\n","export type DeepPartial<T> = {\n    [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\n};\n\n/**\n * Options for a request to the Refuel API\n */\nexport interface RequestOptions<T> {\n    /**\n     * HTTP method to use\n     *\n     * @default \"GET\"\n     */\n    method?: string;\n\n    /** Data to send in the body of the request */\n    data?: T;\n\n    /** Number of retries attempted */\n    retries?: number;\n\n    /** Initial retry timeout (in milliseconds) */\n    initialRetryTimeout?: number;\n\n    /** Maximum number of retries */\n    maxRetries?: number;\n\n    /** Status codes to retry on */\n    retryStatusCodes?: number[];\n}\n\n/**\n * Options to initialize a Refuel client\n */\nexport type RefuelOptions = Pick<\n    RequestOptions<unknown>,\n    \"retries\" | \"initialRetryTimeout\" | \"maxRetries\" | \"retryStatusCodes\"\n> & {\n    /** Origin to send requests to */\n    baseUrl?: string;\n\n    /**\n     * Refuel API key\n     *\n     * @see https://app.refuel.ai/settings\n     */\n    apiKey?: string;\n};\n\n/**\n * Application for labeling items\n */\nexport interface Application {\n    /** Application ID */\n    id: string;\n\n    /** Date the application was created */\n    created_at: string;\n\n    /** Dataset ID the application is associated with */\n    dataset_id: string;\n\n    /** Application description */\n    description?: string;\n\n    /** Emoji for the application that can be used as the icon in the UI */\n    emoji: string | null;\n\n    /** Input columns for the application */\n    input_columns: string[];\n\n    /** Model name for the application */\n    model_name: string;\n\n    /** Application name */\n    name: string;\n\n    /** Project ID the application is associated with */\n    project_id: string;\n\n    /** Subtasks for the application */\n    subtasks: Subtask[];\n\n    /** Task ID the application is associated with */\n    task_id: string;\n\n    /** Name of the task the application is associated with */\n    task_name: string;\n\n    /** Date the related task was last updated */\n    task_updated_at: string | null;\n\n    /** Date the application was last updated */\n    updated_at: string;\n}\n\n/**\n * Options to create an application\n */\nexport interface ApplicationCreateOptions {\n    /** Project ID to deploy the application to */\n    projectId: string;\n\n    /** Task ID to deploy as an application */\n    taskId: string;\n\n    /** Application name */\n    name?: string;\n}\n\n/**\n * Label for an item labeled by an application\n */\nexport interface ApplicationLabel {\n    /** Label value */\n    label: string[];\n\n    /** Confidence score */\n    confidence: number;\n\n    /** Uncalibrated confidence score */\n    raw_confidence: number;\n\n    /** Explanation of the labeling decision */\n    explanation?: string;\n}\n\n/**\n * Output of a synchronous application request\n */\nexport interface ApplicationOutputSync<FieldKeys extends string = string> {\n    /** Refuel UUID for the output */\n    refuel_uuid: string;\n\n    /** Timestamp of the output */\n    refuel_api_timestamp: string;\n\n    /** Fields and their labels */\n    refuel_fields: Record<FieldKeys, ApplicationLabel>;\n\n    /** Telemetry metrics, such as how many tokens were used */\n    usage?: Record<string, unknown>;\n}\n\n/**\n * Output of an asynchronous application request\n */\nexport interface ApplicationOutputAsync {\n    /** Refuel UUID for the output */\n    refuel_uuid: string;\n\n    /** Timestamp of the output */\n    refuel_api_timestamp: string;\n\n    /** URI to the output value */\n    uri: string;\n}\n\n/**\n * Response from an application request\n */\nexport interface ApplicationLabelResponse<\n    T = ApplicationOutputSync | ApplicationOutputAsync\n> {\n    /** Application ID */\n    application_id: string;\n\n    /** Application name */\n    application_name: string;\n\n    /** Output of the application */\n    refuel_output: T[];\n}\n\n/**\n * Options for an application request\n */\nexport interface ApplicationLabelOptions {\n    /** Include an explanation of the labeling decision in the response */\n    explain?: boolean;\n\n    /** Process labels asynchronously */\n    async?: boolean;\n\n    /** Model to use */\n    modelId?: string;\n\n    /** Redact personally identifiable information */\n    redactPII?: boolean;\n}\n\n/**\n * Data to create a project\n */\nexport interface ProjectData {\n    /** Project name */\n    project_name: string;\n\n    /** Project description */\n    description?: string;\n}\n\n/**\n * Project for your team\n */\nexport interface Project {\n    /** Project ID */\n    id: string;\n\n    /** Date the project was created */\n    created_at: string;\n\n    /** Project description */\n    description?: string;\n\n    /** Project name */\n    project_name: string;\n\n    /** Team the project is associated with */\n    team: string | null;\n\n    /** Date the project was last updated */\n    updated_at: string;\n}\n\nexport interface Telemetry {\n    /** Model name */\n    model_name: string;\n\n    /** Type of telemetry (e.g. \"input_tokens\") */\n    telemetry_type: string;\n\n    /** Value of the telemetry (e.g. 100) */\n    telemetry_value: unknown;\n}\n\n/**\n * The source of a label value\n */\nexport enum LabelSource {\n    /** Label from an LLM */\n    LLM = \"LLM\",\n\n    /** Label from a human */\n    HUMAN = \"HUMAN\",\n}\n\n/**\n * Label for an item\n */\nexport interface DatasetItemLabel {\n    /** Confidence score */\n    confidence: number | null;\n\n    /** User who created the label */\n    created_by: string | null;\n\n    /** Error message if the label creation failed */\n    error_msg: string | null;\n\n    /** Expected label (either from ground truth in dataset or human verified value) */\n    expected_label: string | null;\n\n    /** An explanation of the labeling decision */\n    explanation: string | null;\n\n    /** Related subtask ID */\n    id: string;\n\n    /** Label value */\n    label: string;\n\n    /** Original label from the LLM */\n    llm_label: string | null;\n\n    /** Multilabel confidence */\n    multilabel_confidence: Record<string, number> | null;\n\n    /** Whether the label was overridden */\n    overridden: boolean;\n\n    /** Uncalibrated confidence score */\n    raw_confidence: number | null;\n\n    /** Raw response from the LLM */\n    raw_response: string | null;\n\n    /** List of labels the LLM selected from */\n    selected_labels: string[] | null;\n\n    /** The source of the label */\n    source: LabelSource;\n}\n\n/**\n * Data to update a label\n */\nexport type DatasetItemLabelUpdateData =\n    | {\n          label: string | number | boolean;\n          explanation?: string | null;\n      }\n    | {\n          label?: string | number | boolean | null;\n          explanation: string;\n      };\n\n/**\n * Data to update labels for an item\n */\nexport interface DatasetItemLabelsUpdate {\n    [subtaskId: string]: DatasetItemLabelUpdateData;\n}\n\n/**\n * Labels for an item\n */\nexport interface DatasetItemLabels {\n    [subtaskId: string]: DatasetItemLabel;\n}\n\n/**\n * Item in a dataset\n */\nexport interface LabeledDatasetItem {\n    /** Fields and their values */\n    fields: Record<string, unknown> | null;\n\n    /** Labels for the item */\n    labels: DatasetItemLabels | null;\n\n    /** Telemetry for the item (e.g. how many tokens were used) */\n    telemetry: Telemetry[] | null;\n\n    /** Whether the item is in the eval set */\n    in_evalset: boolean;\n}\n\n/**\n * Metadata for a column\n */\nexport interface Metadata {\n    /** Existing label task IDs */\n    existingLabelTaskIds?: string[] | null;\n\n    /** Whether the column is a confidence score */\n    is_confidence: boolean | null;\n\n    /** Whether the column is an LLM label */\n    is_llm_label: boolean | null;\n\n    /** Source of the column value */\n    source: \"refuel\" | \"user\" | null;\n\n    /** Task ID */\n    taskId: string | null;\n\n    /** Type of the column value */\n    type: \"string\" | \"integer\" | \"boolean\" | \"date\";\n}\n\n/**\n * Metadata for columns in a dataset\n */\nexport interface ColumnMetadata {\n    [key: string]: Metadata;\n}\n\n/**\n * The type of a column value\n */\nexport enum DatasetColumnType {\n    STRING = \"string\",\n    NUMBER = \"number\",\n    BOOLEAN = \"boolean\",\n    IMAGE_URL = \"image_url\",\n    PDF_URL = \"pdf_url\",\n}\n\n/**\n * A column in the dataset schema\n */\nexport interface DatasetSchemaColumn {\n    /** Column name */\n    name: string;\n\n    /** Column type */\n    type: DatasetColumnType;\n\n    /** Order of the column */\n    order: number;\n}\n\n/**\n * The schema for a dataset\n */\nexport interface DatasetSchema {\n    /** Properties in the schema */\n    properties: Record<string, DatasetSchemaColumn>;\n\n    /** Type of the schema */\n    type: string;\n\n    /** The schema URI */\n    $schema: string;\n}\n\nexport interface DatasetFromList {\n    /** Dataset ID */\n    id: string;\n\n    /** Dataset name */\n    dataset_name: string;\n\n    /** Date the dataset was created */\n    created_at: string;\n\n    /** Date the dataset was last updated */\n    updated_at: string | null;\n\n    /** Ingest status */\n    ingest_status: string | null;\n\n    /** Dataset schema */\n    dataset_schema: DatasetSchema;\n\n    /** Source of the dataset */\n    source: string;\n}\n\nexport interface Dataset {\n    /** Dataset ID */\n    id: string;\n\n    /** Metadata for the columns */\n    column_metadata: ColumnMetadata | null;\n\n    /** Dataset name */\n    name: string;\n\n    /** Dataset schema */\n    schema: DatasetSchema | null;\n\n    /** Ingest status */\n    ingest_status: string | null;\n\n    /** Items in the dataset */\n    items: LabeledDatasetItem[];\n\n    /** Number of items included in the response */\n    response_count: number;\n\n    /** Total number of items in the dataset */\n    total_count: number;\n}\n\n/**\n * The category of a filter field\n */\nexport enum FilterFieldCategory {\n    /** Filter on a label */\n    LABEL = \"label\",\n\n    /** Filter on metadata */\n    METADATA = \"metadata\",\n\n    /** Filter on similar items */\n    SIMILAR = \"similar\",\n}\n\n/**\n * The operator to use for a filter\n */\nexport enum FilterOperator {\n    /** Equal to */\n    EQUAL = \"=\",\n\n    /** Greater than */\n    GREATER_THAN = \">\",\n\n    /** Greater than or equal to */\n    GREATER_THAN_OR_EQUAL = \">=\",\n\n    /** ILIKE */\n    ILIKE = \"ILIKE\",\n\n    /** In a list */\n    IN = \"IN\",\n\n    /** Is not verified */\n    IS_NOT_VERIFIED = \"IS NOT VERIFIED\",\n\n    /** Is verified */\n    IS_VERIFIED = \"IS VERIFIED\",\n\n    /** Less than */\n    LESS_THAN = \"<\",\n\n    /** Less than or equal to */\n    LESS_THAN_OR_EQUAL = \"<=\",\n\n    /** Matches */\n    MATCHES = \"~*\",\n\n    /** Not equal to */\n    NOT_EQUAL = \"<>\",\n\n    /** Not ILIKE */\n    NOT_ILIKE = \"NOT ILIKE\",\n\n    /** Not matches */\n    NOT_MATCHES = \"!~*\",\n\n    /** Not null */\n    NOT_NULL = \"IS NOT NULL\",\n\n    /** Null */\n    NULL = \"IS NULL\",\n\n    /** Similar to another item */\n    SIMILAR = \"SIMILAR\",\n}\n\n/**\n * An operator option\n */\nexport type FilterOperatorOption = {\n    /** Label for the operator */\n    label: string;\n\n    /** Value of the operator */\n    value: FilterOperator;\n\n    /** Category of the operator */\n    category: \"operator\";\n\n    /** Types supported by the operator */\n    supportedTypes: string[];\n};\n\n/**\n * The type of a filter value\n */\nexport type FilterValueType = \"string\" | \"metadata\" | \"label\" | \"list\";\n\n/**\n * A filter to apply to a dataset or task run\n */\nexport interface SQLFilter {\n    /** Filter type */\n    filter_type: FilterFieldCategory;\n\n    /** Field to filter on */\n    field: string;\n\n    /** Operator to use */\n    operator: FilterOperator;\n\n    /** Value type */\n    value_type?: FilterValueType;\n\n    /** Value to filter on */\n    value?: string | string[];\n\n    /** Subtask ID */\n    subtask_id?: string;\n}\n\nexport type SortDirection = \"ascending\" | \"descending\";\n\n/**\n * The mode to used to generate the schema for a subtask\n */\nexport enum SchemaMode {\n    /** Automatically generate the schema from the guidelines */\n    AUTO = \"auto\",\n\n    /** Manually specify the schema */\n    MANUAL = \"manual\",\n}\n\nexport interface Subtask {\n    /** Subtask ID */\n    id: string;\n\n    /** Default value */\n    default_value?: string | null;\n\n    /** Guidelines */\n    guidelines: string | null;\n\n    /** Columns with a URL to an image */\n    image_columns: string[] | null;\n\n    /** Input columns */\n    input_columns: string[] | null;\n\n    /** Ground truth column */\n    label_column: string | null;\n\n    /** Number of labels to send to the LLM to select from */\n    label_selection?: number | null;\n\n    /** Labels */\n    labels: string[] | null;\n\n    /** Subtask name */\n    name: string | null;\n\n    /** Order of the subtask */\n    order?: number | null;\n\n    /** Hash of the guidelines used to generate the schema */\n    schema_guidelines_hash?: string | null;\n\n    /** Schema mode */\n    schema_mode?: SchemaMode | null;\n\n    /** JSON Schema the LLM output must conform to\n     * @see {@link https://platform.openai.com/docs/guides/structured-outputs#supported-schemas}\n     */\n    schema?: string | null;\n\n    /** Subtask type */\n    type: TaskType | null;\n}\n\n/**\n * The type of enrichment\n */\nexport enum TransformType {\n    /** Search the web for information relevant to the input */\n    WEB_SEARCH = \"web_search\",\n\n    /** Search for a location on a map */\n    MAP_SEARCH = \"map_search\",\n\n    /** Transform a webpage into structured data */\n    WEBPAGE_TRANSFORM = \"webpage_transform\",\n\n    /** Extract text from an image or document */\n    OCR = \"ocr\",\n\n    /** Use a custom API to transform the data */\n    CUSTOM_API = \"custom_api\",\n}\n\n/**\n * An enrichment that can be added to a task\n */\nexport interface Transform\n    extends Pick<\n        Subtask,\n        \"id\" | \"name\" | \"guidelines\" | \"input_columns\" | \"order\"\n    > {\n    /** Type of enrichment */\n    type: TransformType;\n\n    /** Columns to output */\n    output_columns: string[] | null;\n\n    /** Parameters for the enrichment */\n    params: Record<string, unknown>;\n}\n\n/**\n * The type of task\n */\nexport enum TaskType {\n    /** Classify an item into one category */\n    CLASSIFICATION = \"classification\",\n\n    /** Classify an item into one or more categories */\n    MULTILABEL_CLASSIFICATION = \"multilabel_classification\",\n\n    /** Extract an answer from an item */\n    ANSWER_EXTRACTION = \"answer_extraction\",\n\n    /** Extract structured data from a document */\n    DOCUMENT_EXTRACTION = \"document_extraction\",\n\n    /** Extract attributes from an item */\n    ATTRIBUTE_EXTRACTION = \"attribute_extraction\",\n\n    /** Chain of tasks */\n    TASK_CHAIN = \"task_chain\",\n}\n\n/**\n * Labeling task\n */\nexport interface Task {\n    /** Task ID */\n    id: string | null;\n\n    /** Whether to compute confidence scores */\n    compute_confidence: boolean;\n\n    /** Context for the LLM to use when labeling */\n    context: string | null;\n\n    /** Date the task was created */\n    created_at: string | null;\n\n    /** Dataset ID */\n    dataset_id: string | null;\n\n    /** Whether the task is deployed as an application */\n    deployed: boolean | null;\n\n    /** Description of the task */\n    description: string | null;\n\n    /** Emoji for the task */\n    emoji: string | null;\n\n    /** Number of few-shot examples to use */\n    few_shot_num: number | null;\n\n    /** Whether the task is mutable */\n    mutable: boolean;\n\n    /** Project ID */\n    project_id: string | null;\n\n    /** Whether the task is runnable */\n    runnable: boolean;\n\n    /** Selected model ID */\n    selected_model_id: string | null;\n\n    /** Subtasks */\n    subtasks: Partial<Subtask>[] | null;\n\n    /** Task name */\n    task_name: string | null;\n\n    /** Task type */\n    task_type: TaskType | null;\n\n    /** Transforms */\n    transforms?: Partial<Transform>[] | null;\n\n    /** Date the task was last updated */\n    updated_at: string | null;\n\n    /**\n     * Whether to use beam search, which tries out\n     * multiple choices at each step to find the best\n     * overall result\n     */\n    use_beam_search: boolean | null;\n\n    /** Whether to use the LLM cache */\n    use_llm_cache: boolean | null;\n}\n\n/**\n * Telemetry metric for an application or task\n */\nexport interface UsageMetric {\n    /** Application ID */\n    application_id?: string;\n\n    /** Date the metric was recorded */\n    date: string;\n\n    /** Model ID */\n    model_id?: string;\n\n    /** Task ID */\n    task_id?: string;\n\n    /** Value of the metric */\n    value: number;\n}\n\n/**\n * Key for a telemetry metric\n */\nexport type UsageMetricKey =\n    | \"volume\"\n    | \"input_tokens\"\n    | \"output_tokens\"\n    | \"error_4xx\"\n    | \"error_5xx\"\n    | \"latency\"\n    | \"volume_web_search\";\n\n/**\n * Data for a telemetry metric\n */\nexport type UsageData = {\n    [key in UsageMetricKey]: UsageMetric[];\n};\n\nexport enum FeatureFlagValues {\n    ENABLED = \"enabled\",\n    DISABLED = \"disabled\",\n}\n\n/**\n * Team for your organization\n */\nexport interface RefuelTeam {\n    /** Date the team was created */\n    created_at: string;\n\n    /** Feature flags for the team */\n    feature_flags: Record<string, FeatureFlagValues> | null;\n\n    /** Team name */\n    name: string;\n\n    /** Refuel API key\n     *\n     * This can be used to authenticate requests to the Refuel API or with the Refuel SDKs\n     */\n    refuel_api_key: string;\n}\n\n/**\n * Possible states for a user\n */\nexport enum UserState {\n    /** User is active */\n    ACTIVE = \"ACTIVE\",\n\n    /** User has been invited to the team */\n    INVITED = \"INVITED\",\n\n    /** User has been created but not invited */\n    CREATED = \"CREATED\",\n}\n\n/**\n * User for your team\n */\nexport interface User {\n    /** User name */\n    name: string | null;\n\n    /** User email */\n    email: string;\n\n    /** Team the user is associated with */\n    team: string;\n\n    /** URL to the user's picture */\n    picture: string | null;\n\n    /** User state */\n    state: UserState;\n}\n\n/**\n * Logged in user\n */\nexport interface AuthenticatedUser extends User {\n    /** User ID */\n    id: string;\n\n    /** API key */\n    api_key: string | null;\n\n    /** Date the user was created */\n    created_at: string;\n\n    /** Permissions the user has */\n    permissions: string[];\n\n    /** Date the user was last updated */\n    updated_at: string;\n\n    /** Access token used to authenticate requests */\n    access_token: string;\n}\n\n/**\n * Response from inviting users to the team\n */\nexport interface InviteUsersResponse {\n    /** Users that failed to be invited */\n    failed: string[];\n\n    /** Users that were invited */\n    success: string[];\n}\n\n/**\n * A taxonomy label\n */\nexport interface TaxonomyLabel {\n    /** Label ID */\n    id: string;\n\n    /** Label name */\n    name: string;\n\n    /** Label description */\n    description: string;\n\n    /** @alpha Label level */\n    level: number | null;\n\n    /** @alpha Parent labels */\n    parents: string[];\n}\n\n/**\n * Data to create or update a taxonomy label\n */\nexport interface TaxonomyLabelData {\n    /** Label name */\n    name: string;\n\n    /** Label description */\n    description?: string | null;\n}\n\n/**\n * Request body to create or update taxonomy labels\n */\nexport interface TaxonomyLabelRequestBody {\n    /** Labels to create or update */\n    labels: TaxonomyLabelData[];\n}\n\n/**\n * Response from getting taxonomy labels\n */\nexport interface TaxonomyLabelsResponse {\n    /** ID of the task the labels are associated with */\n    id: string;\n\n    /** Date the labels were created */\n    created_at: string;\n\n    /** Labels */\n    labels: TaxonomyLabel[];\n\n    /** ID of the task the labels are associated with */\n    task_id: string;\n\n    /** Total number of labels */\n    total_count: number;\n\n    /** Date the labels were last updated */\n    updated_at: string;\n}\n\n/**\n * Configuration for an integration to an external service\n */\nexport type IntegrationConfig = Record<string, string | null>;\n\n/**\n * An integration with an external service\n */\nexport interface Integration {\n    /** Integration ID */\n    id: string;\n\n    /** Name of the external service */\n    name: string;\n\n    /** Integration category */\n    category: string;\n\n    /** Integration description */\n    description: string;\n\n    /** Whether the integration is connected */\n    is_connected: boolean;\n\n    /** Whether the integration is available */\n    is_available: boolean;\n\n    /** Integration configuration */\n    config: IntegrationConfig;\n\n    /** URL to the logo of the external service */\n    logo_url: string;\n}\n\n/**\n * Options for exporting a dataset\n */\nexport interface ExportDatasetOptions {\n    /** Email to send the export to */\n    email?: string;\n\n    /** Filters to apply to the dataset */\n    filters?: SQLFilter[];\n\n    /** Whether to include labels in the export */\n    includeLabels?: boolean;\n\n    /** Whether to include the Refuel UUID in the export */\n    includeUUID?: boolean;\n\n    /** Task ID */\n    taskId?: string;\n\n    /** Task run ID */\n    taskRunId?: string;\n}\n\n/**\n * Response from exporting a dataset\n */\nexport interface ExportDatasetResponse {\n    /** ID of the export */\n    export_id: string;\n\n    /** URI of the export */\n    uri: string;\n}\n\n/**\n * Options for getting dataset items\n */\nexport interface DatasetItemsOptions {\n    /** Filters to apply to the dataset */\n    filters?: SQLFilter[];\n\n    /** Maximum number of items to return */\n    maxItems?: number;\n\n    /** Offset to start the items at */\n    offset?: number;\n\n    /** Order by */\n    orderBy?: string[];\n}\n\n/**\n * The format of a metric\n */\nexport enum MetricFormat {\n    /** Numeric metric */\n    NUMERIC = \"numeric\",\n\n    /** Percentage metric */\n    PERCENTAGE = \"percentage\",\n\n    /** Histogram metric */\n    HISTOGRAM = \"histogram\",\n\n    /** Dictionary metric */\n    DICT = \"dict\",\n}\n\n/**\n * A metric result\n */\nexport interface MetricResult {\n    /** Metric name */\n    name: string;\n\n    /** Metric value */\n    value: unknown;\n\n    /** Metric type */\n    type: MetricFormat;\n\n    /** Support */\n    support: number;\n\n    /** Subtask ID */\n    subtaskId: string;\n}\n\n/**\n * Metrics for a task run\n */\nexport interface TaskRunMetrics {\n    /** Metrics for the overall task */\n    task: MetricResult[] | null;\n\n    /** Metrics for the subtasks */\n    subtasks: Record<string, MetricResult[]> | null;\n}\n\n/**\n * Evaluation statistics for a model\n */\nexport interface EvaluationStat {\n    /** Metrics for the task run */\n    metrics?: TaskRunMetrics | null;\n\n    /** Model ID */\n    model?: string | null;\n}\n\n/**\n * Finetuning hyperparameters\n */\nexport interface FinetuningHyperparameters {\n    adapter?: string;\n\n    /**\n     * Adjusts how fast the model learns — the higher it\n     * is, the quicker it adapts but with increased risk of\n     * instability\n     */\n    learning_rate_multiplier: number;\n\n    /**\n     * Sets how much the model adapts during finetuning —\n     * the higher the rank, the more complex patterns it\n     * can learn, but it also requires more training data\n     * to avoid overfitting\n     */\n    lora_r?: 8 | 16 | 32 | 64;\n\n    /**\n     * Sets the number of times the model will go through\n     * the entire training data to improve its learning\n     */\n    num_epochs: number;\n}\n\n/**\n * A stage in the finetuning run timeline\n */\nexport interface FinetuningRunStage {\n    /** Stage details */\n    detail: string | null;\n\n    /** Stage index */\n    index: number;\n\n    /** Stage ID */\n    stage_id: string;\n\n    /** Stage status */\n    status: \"NOT STARTED\" | \"IN PROGRESS\" | \"COMPLETED\" | \"FAILED\";\n}\n\n/**\n * The availability status of a labeling model\n */\nexport enum AvailabilityStatus {\n    UNAVAILABLE = \"UNAVAILABLE\",\n    AVAILABLE = \"AVAILABLE\",\n}\n\n/**\n * The status of a finetuning run\n */\nexport enum FinetuningRunStatus {\n    INITIALIZATION_IN_PROGRESS = \"INITIALIZATION IN PROGRESS\",\n    INITIALIZATION_COMPLETE = \"INITIALIZATION COMPLETE\",\n\n    DATASET_PREP_NOT_STARTED = \"DATASET PREPARATION NOT STARTED\",\n    DATASET_PREP_IN_PROGRESS = \"DATASET PREPARATION IN PROGRESS\",\n    DATASET_PREP_COMPLETED = \"DATASET PREPARATION COMPLETED\",\n    DATASET_PREP_FAILED = \"DATASET PREPARATION FAILED\",\n\n    RESOURCE_ALLOCATION_NOT_STARTED = \"RESOURCE ALLOCATION NOT STARTED\",\n    RESOURCE_ALLOCATION_IN_PROGRESS = \"RESOURCE ALLOCATION IN PROGRESS\",\n    RESOURCE_ALLOCATION_COMPLETED = \"RESOURCE ALLOCATION COMPLETED\",\n    RESOURCE_ALLOCATION_FAILED = \"RESOURCE ALLOCATION FAILED\",\n\n    TRAINING_NOT_STARTED = \"TRAINING NOT STARTED\",\n    TRAINING_IN_PROGRESS = \"TRAINING IN PROGRESS\",\n    TRAINING_COMPLETED = \"TRAINING COMPLETED\",\n    TRAINING_FAILED = \"TRAINING FAILED\",\n\n    DEPLOY_NOT_STARTED = \"DEPLOYMENT NOT STARTED\",\n    DEPLOY_IN_PROGRESS = \"DEPLOYMENT IN PROGRESS\",\n    DEPLOY_COMPLETED = \"DEPLOYMENT COMPLETED\",\n    DEPLOY_FAILED = \"DEPLOYMENT FAILED\",\n\n    EVALUATION_NOT_STARTED = \"EVALUATION NOT STARTED\",\n    EVALUATION_IN_PROGRESS = \"EVALUATION IN PROGRESS\",\n    EVALUATION_COMPLETED = \"EVALUATION COMPLETED\",\n    EVALUATION_FAILED = \"EVALUATION FAILED\",\n\n    INTERRUPTED = \"INTERRUPTED\",\n}\n\n/**\n * LLM labeling model\n */\nexport interface LabelingModel {\n    /** Labeling model ID */\n    id: string;\n\n    /** Availability status */\n    availability_status: AvailabilityStatus;\n\n    /** Generate labels with this model and include them in the training data */\n    augmented_finetuning_model: string | null;\n\n    /** Base model */\n    base_model: string;\n\n    /** Model to evaluate the finetuned model against */\n    comparison_model?: string | null;\n\n    /** Date the labeling model was created */\n    created_at: string | null;\n\n    /** Datasets the labeling model is associated with */\n    datasets: string[];\n\n    /** Evaluation statistics */\n    evaluation_stats: EvaluationStat[];\n\n    /** Finetuning run status */\n    finetuning_run_status: FinetuningRunStatus | null;\n\n    /** Finetuning run timeline */\n    finetuning_run_timeline: FinetuningRunStage[] | null;\n\n    /** Finetuning hyperparameters */\n    hyperparameters: FinetuningHyperparameters | null;\n\n    /** Whether to use LoRA finetuning */\n    lora: boolean;\n\n    /** Labeling model name */\n    name: string;\n\n    /** Project ID */\n    project_id: string | null;\n\n    /** Provider */\n    provider: string;\n\n    /** Task ID */\n    task_id: string | null;\n\n    /** Training statistics */\n    training_stats: {\n        /**\n         * Shows how well the model is learning from\n         * the training data over time, with lower\n         * values indicating better performance\n         */\n        training_loss: [number, number][] | null;\n\n        /**\n         * Measures the model's performance on unseen\n         * data to detect overfitting, ideally decreasing\n         * along with training loss.\n         */\n        evaluation_loss: [number, number][] | null;\n\n        /**\n         * Points during training where the model's\n         * progress was saved, useful for tracking\n         * and correlating loss values.\n         */\n        checkpoint_index: number[];\n    } | null;\n\n    /** Date the labeling model was last updated */\n    updated_at: string | null;\n}\n\n/**\n * Options for creating a finetuned model\n */\nexport type FinetunedModelCreateOptions = Pick<\n    LabelingModel,\n    | \"augmented_finetuning_model\"\n    | \"base_model\"\n    | \"comparison_model\"\n    | \"datasets\"\n    | \"hyperparameters\"\n    | \"lora\"\n    | \"project_id\"\n    | \"task_id\"\n>;\n\n/**\n * LLM model available to a team\n */\nexport interface TeamModel {\n    /** Model name */\n    name: string;\n\n    /** Model provider */\n    provider: string;\n\n    /** Model display name */\n    display_name: string;\n\n    /** Model parameters */\n    params: Record<string, unknown>;\n}\n\n/**\n * The status of a task run\n */\nexport type TaskRunStatus =\n    | \"restarted\"\n    | \"not_started\"\n    | \"active\"\n    | \"completed\"\n    | \"failed\"\n    | \"preview\"\n    | \"cancelled\";\n\n/**\n * A task run\n */\nexport interface TaskRun {\n    /** Task run ID */\n    id: string;\n\n    /** Project ID */\n    project_id: string;\n\n    /** Task ID */\n    task_id: string;\n\n    /** Task name */\n    task_name: string;\n\n    /** Model name */\n    model_name: string;\n\n    /** Dataset ID */\n    dataset_id: string;\n\n    /** Dataset name */\n    dataset_name: string;\n\n    /** Task run status */\n    status: TaskRunStatus;\n\n    /** Whether the task run is an evaluation run */\n    is_eval_run: boolean;\n\n    /** Date the task run was created */\n    created_at: string;\n\n    /** Date the task run was last updated */\n    updated_at: string;\n\n    /** Model(s) used to label the items in this run */\n    model_ids: string[];\n}\n\n/**\n * Options for getting task runs\n */\nexport interface TaskRunListOptions {\n    /** Dataset ID */\n    datasetId?: string;\n\n    /** Whether to get the eval set */\n    evalSet?: boolean;\n}\n\n/**\n * Options for creating a task run\n */\nexport interface TaskRunCreateOptions {\n    /** Maximum number of items to label */\n    limit?: number;\n\n    /** Whether to get the eval set */\n    evalSet?: boolean;\n\n    /** Filters to apply to the dataset */\n    filters?: SQLFilter[];\n\n    /** Model(s) used to label the items in this run */\n    modelIds?: string[];\n\n    /** Dataset ID */\n    datasetId?: string;\n}\n\n/**\n * Options for canceling a task run\n */\nexport interface TaskRunCancelOptions {\n    /** Whether this is an evaluation run */\n    evalSet?: boolean;\n\n    /** Dataset ID */\n    datasetId?: string;\n}\n\n/**\n * Options for listing labels for an item\n */\nexport interface LabelListOptions {\n    /** Override the model used for labeling */\n    modelId?: string;\n\n    /** Specify the subtask to label */\n    subtaskId?: string;\n\n    /**\n     * Generate the label if it is missing\n     *\n     * @default false\n     */\n    generateMissingLabels?: boolean;\n\n    /**\n     * Generate explanations for the label\n     *\n     * @default false\n     */\n    generateMissingExplanations?: boolean;\n}\n","import { Applications } from \"./Applications\";\nimport { DatasetExports } from \"./DatasetExports\";\nimport { DatasetItems } from \"./DatasetItems\";\nimport { Datasets } from \"./Datasets\";\nimport { FinetunedModels } from \"./FinetunedModels\";\nimport { Integrations } from \"./Integrations\";\nimport { Labels } from \"./Labels\";\nimport { Projects } from \"./Projects\";\nimport { RefuelBase } from \"./RefuelBase\";\nimport { TaskModels } from \"./TaskModels\";\nimport { TaskRuns } from \"./TaskRuns\";\nimport { Tasks } from \"./Tasks\";\nimport { Taxonomies } from \"./Taxonomies\";\nimport { TaxonomyLabels } from \"./TaxonomyLabels\";\nimport { Team } from \"./Team\";\nimport { TeamModels } from \"./TeamModels\";\nimport { RefuelOptions } from \"./types\";\nimport { Usage } from \"./Usage\";\nimport { Users } from \"./Users\";\n\n/**\n * Main class for interacting with the Refuel API.\n *\n * @example\n * ```ts\n * // Initialize the Refuel class with your access token\n * const refuel = new Refuel(accessToken);\n *\n * // List all projects\n * const projects = await refuel.projects.list();\n * console.log(projects);\n * ```\n */\nexport class Refuel {\n    public readonly base: RefuelBase;\n\n    public readonly applications: Applications;\n    public readonly datasetExports: DatasetExports;\n    public readonly datasetItems: DatasetItems;\n    public readonly datasets: Datasets;\n    public readonly finetunedModels: FinetunedModels;\n    public readonly integrations: Integrations;\n    public readonly labels: Labels;\n    public readonly projects: Projects;\n    public readonly taskModels: TaskModels;\n    public readonly taskRuns: TaskRuns;\n    public readonly tasks: Tasks;\n    public readonly taxonomies: Taxonomies;\n    public readonly taxonomyLabels: TaxonomyLabels;\n    public readonly team: Team;\n    public readonly teamModels: TeamModels;\n    public readonly usage: Usage;\n    public readonly users: Users;\n\n    constructor(options?: RefuelOptions | string) {\n        let apiKey = typeof options === \"string\" ? options : options?.apiKey;\n\n        if (!apiKey && typeof process !== \"undefined\") {\n            apiKey = process.env.REFUEL_API_KEY;\n        }\n\n        if (!apiKey) {\n            throw new Error(\"Refuel API key is required\");\n        }\n\n        this.base = new RefuelBase(\n            apiKey,\n            typeof options === \"string\" ? undefined : options\n        );\n\n        this.applications = new Applications(this.base);\n        this.datasets = new Datasets(this.base);\n        this.datasetItems = new DatasetItems(this.base);\n        this.datasetExports = new DatasetExports(this.base);\n        this.finetunedModels = new FinetunedModels(this.base);\n        this.integrations = new Integrations(this.base);\n        this.labels = new Labels(this.base);\n        this.projects = new Projects(this.base);\n        this.taskModels = new TaskModels(this.base);\n        this.taskRuns = new TaskRuns(this.base);\n        this.tasks = new Tasks(this.base);\n        this.taxonomies = new Taxonomies(this.base);\n        this.taxonomyLabels = new TaxonomyLabels(this.base);\n        this.team = new Team(this.base);\n        this.teamModels = new TeamModels(this.base);\n        this.usage = new Usage(this.base);\n        this.users = new Users(this.base);\n    }\n}\n\nexport * from \"./types\";\n"],"names":[],"mappings":"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"}