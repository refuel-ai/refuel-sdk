{"version":3,"file":"index.mjs","sources":["../src/Applications/index.ts","../src/consts.ts","../src/DatasetExports/index.ts","../src/Datasets/index.ts","../src/Integrations/index.ts","../src/Projects/index.ts","../src/RefuelBase/index.ts","../src/Tasks/index.ts","../src/Taxonomies/index.ts","../src/TaxonomyLabels/index.ts","../src/Team/index.ts","../src/Usage/index.ts","../src/Users/index.ts","../src/types.ts","../src/index.ts"],"sourcesContent":["import { RefuelBase } from \"../RefuelBase\";\nimport {\n    Application,\n    ApplicationCreateOptions,\n    ApplicationLabelOptions,\n    ApplicationLabelResponse,\n    ApplicationOutputAsync,\n    ApplicationOutputSync,\n    Dataset,\n} from \"../types\";\n\nexport class Applications {\n    private readonly base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    async create(options: ApplicationCreateOptions): Promise<Application> {\n        const params = new URLSearchParams();\n        params.append(\"task_id\", options.taskId);\n\n        if (options.name) {\n            params.append(\"name\", options.name);\n        }\n\n        return this.base.request<Application>({\n            method: \"POST\",\n            endpoint: `/projects/${\n                options.projectId\n            }/applications?${params.toString()}`,\n        });\n    }\n\n    async get(applicationId: string): Promise<Application> {\n        return this.base.request<Application>({\n            method: \"GET\",\n            endpoint: `/applications/${applicationId}`,\n        });\n    }\n\n    async list(projectId?: string): Promise<Application[]> {\n        const endpoint = projectId\n            ? `/projects/${projectId}/applications`\n            : \"/applications\";\n\n        return this.base.request<Application[]>({\n            method: \"GET\",\n            endpoint,\n        });\n    }\n\n    async delete(applicationId: string): Promise<void> {\n        return this.base.request<void>({\n            method: \"DELETE\",\n            endpoint: `/applications/${applicationId}`,\n        });\n    }\n\n    async label<\n        FieldKeys extends string,\n        A extends boolean | undefined = undefined\n    >(\n        applicationId: string,\n        data: Record<string, unknown>[],\n        options?: ApplicationLabelOptions & { async?: A }\n    ) {\n        const params = new URLSearchParams();\n        if (options?.modelId) {\n            params.append(\"model_id\", options.modelId);\n        }\n\n        if (options?.telemetry !== undefined) {\n            params.append(\"telemetry\", options.telemetry.toString());\n        }\n\n        if (options?.explain !== undefined) {\n            params.append(\"explain\", options.explain.toString());\n        }\n\n        if (options?.redactPII !== undefined) {\n            params.append(\"redact_pii\", options.redactPII.toString());\n        }\n\n        if (options?.async !== undefined) {\n            params.append(\"is_async\", options.async.toString());\n        }\n\n        return this.base.request<\n            A extends true\n                ? ApplicationLabelResponse<ApplicationOutputAsync>\n                : ApplicationLabelResponse<ApplicationOutputSync<FieldKeys>>,\n            Record<string, unknown>[]\n        >({\n            method: \"POST\",\n            endpoint: `/applications/${applicationId}/label?${params.toString()}`,\n            data,\n        });\n    }\n\n    async getLabeledItem<FieldKeys extends string>(\n        applicationId: string,\n        itemId: string\n    ) {\n        return this.base.request<\n            ApplicationLabelResponse<ApplicationOutputSync<FieldKeys>>\n        >({\n            method: \"GET\",\n            endpoint: `/applications/${applicationId}/items/${itemId}`,\n        });\n    }\n\n    async feedback(\n        applicationId: string,\n        itemId: string,\n        correctLabelData: Record<string, string>\n    ) {\n        const application = await this.get(applicationId);\n\n        const subtaskMap = Object.fromEntries(\n            application.subtasks?.map((subtask) => [\n                subtask.name,\n                subtask.id,\n            ]) ?? []\n        );\n\n        const feedbackData: Record<string, { label: string }> = {};\n        for (const [subtaskName, subtaskLabel] of Object.entries(\n            correctLabelData\n        )) {\n            const subtaskId = subtaskMap[subtaskName];\n            if (!subtaskId) {\n                throw new Error(`Invalid field: ${subtaskName}`);\n            }\n            feedbackData[subtaskId] = { label: subtaskLabel };\n        }\n\n        return this.base.request<Dataset>({\n            method: \"POST\",\n            endpoint: `/applications/${applicationId}/items/${itemId}/label`,\n            data: feedbackData,\n        });\n    }\n}\n","export const DEFAULT_BASE_URL = \"https://cloud-api.refuel.ai\";\n","import { RefuelBase } from \"../RefuelBase\";\nimport { ExportDatasetOptions, ExportDatasetResponse } from \"../types\";\n\nexport class DatasetExports {\n    private readonly base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    async get(exportId: string, datasetId: string): Promise<string> {\n        return this.base.request<string>({\n            method: \"GET\",\n            endpoint: `/datasets/${datasetId}/exports/${exportId}`,\n        });\n    }\n\n    async create(\n        datasetId: string,\n        options?: ExportDatasetOptions\n    ): Promise<ExportDatasetResponse> {\n        const params = new URLSearchParams();\n\n        if (options?.email) {\n            params.append(\"email\", options.email);\n        }\n\n        if (options?.taskId) {\n            params.append(\"task_id\", options.taskId);\n        }\n\n        if (options?.includeUUID !== undefined) {\n            params.append(\"include_uuid\", options.includeUUID.toString());\n        }\n\n        if (options?.includeLabels !== undefined) {\n            params.append(\"include_labels\", options.includeLabels.toString());\n        }\n\n        if (options?.taskRunId) {\n            params.append(\"task_run_id\", options.taskRunId);\n        }\n\n        if (Array.isArray(options?.filters)) {\n            options.filters.forEach((filter) => {\n                params.append(\"filters\", JSON.stringify(filter));\n            });\n        }\n\n        return this.base.request<ExportDatasetResponse>({\n            method: \"POST\",\n            endpoint: `/datasets/${datasetId}/exports?${params.toString()}`,\n        });\n    }\n}\n","import { RefuelBase } from \"../RefuelBase\";\nimport { Dataset, DatasetFromList } from \"../types\";\n\nexport class Datasets {\n    private readonly base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    async get(datasetId: string): Promise<Dataset> {\n        return this.base.request<Dataset>({\n            method: \"GET\",\n            endpoint: `/datasets/${datasetId}`,\n        });\n    }\n\n    async list(projectId?: string): Promise<DatasetFromList[]> {\n        const params = new URLSearchParams();\n\n        if (projectId) {\n            params.append(\"project_id\", projectId);\n        }\n\n        return this.base.request<DatasetFromList[]>({\n            method: \"GET\",\n            endpoint: `/datasets?${params.toString()}`,\n        });\n    }\n\n    async delete(datasetId: string): Promise<void> {\n        return this.base.request<void>({\n            method: \"DELETE\",\n            endpoint: `/datasets/${datasetId}`,\n        });\n    }\n}\n","import { RefuelBase } from \"../RefuelBase\";\nimport { Integration } from \"../types\";\n\nexport class Integrations {\n    private base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    async get(integrationId: string): Promise<Integration> {\n        return this.base.request<Integration>({\n            method: \"GET\",\n            endpoint: `/integrations/${integrationId}`,\n        });\n    }\n\n    async list(): Promise<Integration[]> {\n        return this.base.request<Integration[]>({\n            method: \"GET\",\n            endpoint: \"/integrations\",\n        });\n    }\n\n    async update(\n        integrationId: string,\n        data: Partial<Integration>\n    ): Promise<Integration> {\n        return this.base.request<Integration, Partial<Integration>>({\n            method: \"PATCH\",\n            endpoint: `/integrations/${integrationId}`,\n            data,\n        });\n    }\n}\n","import { RefuelBase } from \"../RefuelBase\";\nimport { Project, ProjectData } from \"../types\";\n\nexport class Projects {\n    private base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    async create(data: ProjectData): Promise<Project> {\n        const params = new URLSearchParams();\n        params.append(\"project_name\", data.project_name);\n        params.append(\"description\", data.description);\n\n        return this.base.request<Project>({\n            method: \"POST\",\n            endpoint: `/projects?${params.toString()}`,\n            data,\n        });\n    }\n\n    async get(projectId: string): Promise<Project> {\n        return this.base.request<Project>({\n            method: \"GET\",\n            endpoint: `/projects/${projectId}`,\n        });\n    }\n\n    async list(): Promise<Project[]> {\n        return this.base.request<Project[]>({\n            method: \"GET\",\n            endpoint: \"/projects\",\n        });\n    }\n\n    async delete(projectId: string): Promise<void> {\n        return this.base.request<void>({\n            method: \"DELETE\",\n            endpoint: `/projects/${projectId}`,\n        });\n    }\n}\n","export class RefuelBase {\n    protected readonly accessToken: string;\n    protected readonly baseUrl: string;\n\n    constructor(accessToken: string, baseUrl: string) {\n        this.accessToken = accessToken;\n        this.baseUrl = baseUrl;\n    }\n\n    public async request<Response, RequestBody = unknown>({\n        method,\n        endpoint,\n        data,\n    }: {\n        method: string;\n        endpoint: string;\n        data?: RequestBody;\n    }): Promise<Response> {\n        const url = `${this.baseUrl}${endpoint}`;\n        const headers: HeadersInit = {\n            Authorization: `Bearer ${this.accessToken}`,\n        };\n\n        let body;\n\n        if (data instanceof FormData) {\n            body = data;\n        } else if (data) {\n            headers[\"Content-Type\"] = \"application/json\";\n            body = JSON.stringify(data);\n        }\n\n        const response = await fetch(url, {\n            method,\n            headers,\n            body,\n        });\n\n        const responseJSON = await response.json();\n\n        if (!response.ok) {\n            throw new Error(\n                responseJSON?.error_msg ||\n                    \"An error occurred while making the API request.\"\n            );\n        }\n\n        return (responseJSON.data || responseJSON) as Response;\n    }\n}\n","import { RefuelBase } from \"../RefuelBase\";\nimport { Task } from \"../types\";\n\nexport class Tasks {\n    private readonly base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    async get(taskId: string): Promise<Task> {\n        return this.base.request<Task>({\n            method: \"GET\",\n            endpoint: `/tasks/${taskId}`,\n        });\n    }\n\n    async list(projectId?: string): Promise<Tasks[]> {\n        const endpoint = projectId ? `/projects/${projectId}/tasks` : \"/tasks\";\n\n        return this.base.request<Tasks[]>({\n            method: \"GET\",\n            endpoint,\n        });\n    }\n\n    async update(taskId: string, data: Partial<Task>): Promise<Task> {\n        return this.base.request<Task, Partial<Task>>({\n            method: \"PATCH\",\n            endpoint: `/tasks/${taskId}`,\n            data,\n        });\n    }\n\n    async delete(taskId: string): Promise<void> {\n        return this.base.request<void>({\n            method: \"DELETE\",\n            endpoint: `/tasks/${taskId}`,\n        });\n    }\n}\n","import { RefuelBase } from \"../RefuelBase\";\nimport {\n    TaxonomyLabelData,\n    TaxonomyLabelRequestBody,\n    TaxonomyLabelsResponse,\n} from \"../types\";\n\nexport class Taxonomies {\n    private readonly base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    async create(\n        taskId: string,\n        labels: TaxonomyLabelData | TaxonomyLabelData[] = []\n    ): Promise<TaxonomyLabelsResponse> {\n        const data = {\n            labels: Array.isArray(labels) ? labels : [labels],\n        };\n\n        return this.base.request<\n            TaxonomyLabelsResponse,\n            TaxonomyLabelRequestBody\n        >({\n            method: \"POST\",\n            endpoint: `/tasks/${taskId}/taxonomies`,\n            data,\n        });\n    }\n\n    async get(taskId: string, taxonomyId: string) {\n        return this.base.request<TaxonomyLabelsResponse>({\n            method: \"GET\",\n            endpoint: `/tasks/${taskId}/taxonomies/${taxonomyId}`,\n        });\n    }\n\n    async delete(taskId: string, taxonomyId: string): Promise<void> {\n        return this.base.request<void>({\n            method: \"DELETE\",\n            endpoint: `/tasks/${taskId}/taxonomies/${taxonomyId}`,\n        });\n    }\n\n    async duplicate(\n        taskId: string,\n        taxonomyId: string\n    ): Promise<TaxonomyLabelsResponse> {\n        return this.base.request<TaxonomyLabelsResponse>({\n            method: \"POST\",\n            endpoint: `/tasks/${taskId}/taxonomies/${taxonomyId}/duplicate`,\n        });\n    }\n}\n","import { RefuelBase } from \"../RefuelBase\";\nimport {\n    TaxonomyLabelsResponse,\n    TaxonomyLabel,\n    TaxonomyLabelData,\n} from \"../types\";\n\nexport class TaxonomyLabels {\n    private readonly base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    async create(\n        taskId: string,\n        taxonomyId: string,\n        labels: TaxonomyLabelData | TaxonomyLabelData[]\n    ): Promise<void> {\n        const data = new FormData();\n\n        data.append(\n            \"labels\",\n            JSON.stringify(Array.isArray(labels) ? labels : [labels])\n        );\n\n        return this.base.request<void>({\n            method: \"POST\",\n            endpoint: `/tasks/${taskId}/taxonomies/${taxonomyId}`,\n            data,\n        });\n    }\n\n    async list(\n        taskId: string,\n        taxonomyId: string,\n        options?: {\n            filter?: string;\n            offset?: number;\n            maxItems?: number;\n        }\n    ): Promise<TaxonomyLabelsResponse> {\n        const params = new URLSearchParams();\n\n        if (options?.offset) {\n            params.append(\"offset\", options.offset.toString());\n        }\n\n        if (options?.maxItems) {\n            params.append(\"max_items\", options.maxItems.toString());\n        }\n\n        if (options?.filter) {\n            params.append(\"filter\", options?.filter);\n        }\n\n        return this.base.request<TaxonomyLabelsResponse>({\n            method: \"GET\",\n            endpoint: `/tasks/${taskId}/taxonomies/${taxonomyId}?${params.toString()}`,\n        });\n    }\n\n    async update(\n        taskId: string,\n        taxonomyId: string,\n        labelId: string,\n        data: Partial<TaxonomyLabelData>\n    ): Promise<TaxonomyLabel> {\n        return this.base.request<TaxonomyLabel>({\n            method: \"PATCH\",\n            endpoint: `/tasks/${taskId}/taxonomies/${taxonomyId}/labels/${labelId}`,\n            data,\n        });\n    }\n\n    async delete(\n        taskId: string,\n        taxonomyId: string,\n        labelId: string\n    ): Promise<void> {\n        return this.base.request<void>({\n            method: \"DELETE\",\n            endpoint: `/tasks/${taskId}/taxonomies/${taxonomyId}/labels/${labelId}`,\n        });\n    }\n}\n","import { RefuelBase } from \"../RefuelBase\";\nimport { RefuelTeam } from \"../types\";\n\nexport class Team {\n    private readonly base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    async get(): Promise<RefuelTeam> {\n        return this.base.request<RefuelTeam>({\n            method: \"GET\",\n            endpoint: \"/team\",\n        });\n    }\n\n    async regenerateApiKey(): Promise<string> {\n        await this.base.request<void>({\n            method: \"PATCH\",\n            endpoint: \"/team\",\n            data: {\n                update_api_key: true,\n            },\n        });\n\n        return (await this.get()).refuel_api_key;\n    }\n}\n","import { RefuelBase } from \"../RefuelBase\";\nimport { UsageData } from \"../types\";\n\nexport class Usage {\n    private readonly base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    async get(\n        startDate: string,\n        endDate: string,\n        options?: {\n            applicationId?: string;\n            taskId?: string;\n            modelId?: string;\n        }\n    ): Promise<UsageData> {\n        const params = new URLSearchParams();\n        params.append(\"start_date\", startDate);\n        params.append(\"end_date\", endDate);\n\n        if (options?.applicationId) {\n            params.append(\"application_id\", options.applicationId);\n        }\n\n        if (options?.taskId) {\n            params.append(\"task_id\", options.taskId);\n        }\n\n        if (options?.modelId) {\n            params.append(\"model\", options.modelId);\n        }\n\n        return this.base.request<UsageData>({\n            method: \"GET\",\n            endpoint: `/usage?${params.toString()}`,\n        });\n    }\n}\n","import { RefuelBase } from \"../RefuelBase\";\nimport { InviteUsersResponse, User } from \"../types\";\n\nexport class Users {\n    private readonly base: RefuelBase;\n\n    constructor(base: RefuelBase) {\n        this.base = base;\n    }\n\n    async create(email: string | string[]) {\n        const data = Array.isArray(email) ? email : [email];\n        return this.base.request<InviteUsersResponse, string[]>({\n            method: \"POST\",\n            endpoint: \"/users\",\n            data,\n        });\n    }\n\n    async get(userId: string): Promise<User> {\n        return this.base.request<User>({\n            method: \"GET\",\n            endpoint: `/users/${userId}`,\n        });\n    }\n\n    async list(): Promise<User[]> {\n        return this.base.request<User[]>({\n            method: \"GET\",\n            endpoint: `/users`,\n        });\n    }\n}\n","export interface Application {\n    id: string;\n    created_at: string;\n    dataset_id: string;\n    description?: string;\n    emoji: string | null;\n    input_columns: string[];\n    model_name: string;\n    name: string;\n    project_id: string;\n    subtasks: Subtask[];\n    task_id: string;\n    task_name: string;\n    task_updated_at: string | null;\n    updated_at: string;\n}\n\nexport interface ApplicationCreateOptions {\n    projectId: string;\n    taskId: string;\n    name?: string;\n}\n\nexport interface ApplicationLabel {\n    label: string[];\n    confidence: number;\n    raw_confidence: number;\n    explanation?: string;\n}\n\nexport interface ApplicationOutputSync<FieldKeys extends string = string> {\n    refuel_uuid: string;\n    refuel_api_timestamp: string;\n    refuel_fields: Record<FieldKeys, ApplicationLabel>;\n    usage?: Record<string, unknown>;\n}\n\nexport interface ApplicationOutputAsync {\n    refuel_uuid: string;\n    refuel_api_timestamp: string;\n    uri: string;\n}\n\nexport interface ApplicationLabelResponse<\n    T = ApplicationOutputSync | ApplicationOutputAsync\n> {\n    application_id: string;\n    application_name: string;\n    refuel_output: T[];\n}\n\nexport interface ApplicationLabelOptions {\n    explain?: boolean;\n    async?: boolean;\n    modelId?: string;\n    redactPII?: boolean;\n    telemetry?: boolean;\n}\n\nexport interface ProjectData {\n    project_name: string;\n    description: string;\n}\n\nexport interface Project {\n    id: string;\n    created_at: string;\n    description?: string;\n    project_name: string;\n    team: string | null;\n    updated_at: string;\n}\n\nexport interface Telemetry {\n    model_name: string;\n    telemetry_type: string;\n    telemetry_value: any;\n}\n\nexport enum LabelSource {\n    LLM = \"LLM\",\n    HUMAN = \"HUMAN\",\n}\n\nexport interface Label {\n    confidence: number | null;\n    created_by: string | null;\n    error_msg: string | null;\n    expected_label: string | null;\n    explanation: string | null;\n    /** related subtask_id */\n    id: string;\n    label: string;\n    llm_label: string | null;\n    multilabel_confidence: Record<string, number> | null;\n    overridden: boolean;\n    raw_confidence: number | null;\n    raw_response: string | null;\n    selected_labels: string[] | null;\n    source: LabelSource;\n}\n\nexport interface LabeledDatasetItem {\n    fields: Record<string, unknown> | null;\n    labels: Label[] | null;\n    telemetry: Telemetry[] | null;\n    in_evalset: boolean;\n}\n\nexport interface Metadata {\n    existingLabelTaskIds?: string[] | null;\n    is_confidence: boolean | null;\n    is_llm_label: boolean | null;\n    source: \"refuel\" | \"user\" | null;\n    taskId: string | null;\n    type: \"string\" | \"integer\" | \"boolean\" | \"date\";\n}\n\nexport interface ColumnMetadata {\n    [key: string]: Metadata;\n}\n\nexport enum DatasetColumnType {\n    STRING = \"string\",\n    NUMBER = \"number\",\n    BOOLEAN = \"boolean\",\n    IMAGE_URL = \"image_url\",\n    PDF_URL = \"pdf_url\",\n}\n\nexport interface DatasetSchemaColumn {\n    name: string;\n    type: DatasetColumnType;\n    order: number;\n}\n\nexport interface DatasetSchema {\n    properties: Record<string, DatasetSchemaColumn>;\n    type: string;\n    $schema: string;\n}\n\nexport interface DatasetFromList {\n    id: string;\n    dataset_name: string;\n    created_at: string;\n    updated_at: string | null;\n    ingest_status: string | null;\n    dataset_schema: DatasetSchema;\n    source: string;\n}\n\nexport interface Dataset {\n    id: string;\n    column_metadata: ColumnMetadata | null;\n    name: string;\n    schema: DatasetSchema | null;\n    ingest_status: string | null;\n    items: Record<string, string>[];\n    response_count: number;\n    total_count: number;\n}\n\nexport enum FilterFieldCategory {\n    LABEL = \"label\",\n    METADATA = \"metadata\",\n    SIMILAR = \"similar\",\n}\n\nexport enum FilterOperator {\n    EQUAL = \"=\",\n    GREATER_THAN = \">\",\n    GREATER_THAN_OR_EQUAL = \">=\",\n    ILIKE = \"ILIKE\",\n    IN = \"IN\",\n    IS_NOT_VERIFIED = \"IS NOT VERIFIED\",\n    IS_VERIFIED = \"IS VERIFIED\",\n    LESS_THAN = \"<\",\n    LESS_THAN_OR_EQUAL = \"<=\",\n    MATCHES = \"~*\",\n    NOT_EQUAL = \"<>\",\n    NOT_ILIKE = \"NOT ILIKE\",\n    NOT_MATCHES = \"!~*\",\n    NOT_NULL = \"IS NOT NULL\",\n    NULL = \"IS NULL\",\n    SIMILAR = \"SIMILAR\",\n}\n\nexport type FilterOperatorOption = {\n    label: string;\n    value: FilterOperator;\n    category: \"operator\";\n    supportedTypes: string[];\n};\n\nexport type FilterValueType = \"string\" | \"metadata\" | \"label\" | \"list\";\n\nexport interface SQLFilter {\n    filter_type: FilterFieldCategory;\n    field: string;\n    operator: FilterOperator;\n    value_type?: FilterValueType;\n    value?: string | string[];\n    subtask_id?: string;\n}\n\nexport type SortDirection = \"ascending\" | \"descending\";\n\nexport enum SchemaMode {\n    AUTO = \"auto\",\n    MANUAL = \"manual\",\n}\n\nexport interface Subtask {\n    id: string;\n    default_value?: string | null;\n    guidelines: string | null;\n    image_columns: string[] | null;\n    input_columns: string[] | null;\n    label_column: string | null;\n    label_selection?: number | null;\n    labels: string[] | null;\n    name: string | null;\n    order?: number | null;\n    schema_guidelines_hash?: string | null;\n    schema_mode?: SchemaMode | null;\n    schema?: string | null;\n    type: TaskType | null;\n}\n\nexport enum TransformType {\n    WEB_SEARCH = \"web_search\",\n    MAP_SEARCH = \"map_search\",\n    WEBPAGE_TRANSFORM = \"webpage_transform\",\n    OCR = \"ocr\",\n    CUSTOM_API = \"custom_api\",\n}\n\nexport interface Transform\n    extends Pick<\n        Subtask,\n        \"id\" | \"name\" | \"guidelines\" | \"input_columns\" | \"order\"\n    > {\n    type: TransformType;\n    output_columns: string[] | null;\n    params: Record<string, unknown>;\n}\n\nexport enum TaskType {\n    TASK_CHAIN = \"task_chain\",\n}\n\nexport interface Task {\n    id: string | null;\n    compute_confidence: boolean;\n    context: string | null;\n    created_at: string | null;\n    dataset_id: string | null;\n    deployed: boolean | null;\n    description: string | null;\n    emoji: string | null;\n    few_shot_num: number | null;\n    mutable: boolean;\n    project_id: string | null;\n    runnable: boolean;\n    selected_model_id: string | null;\n    subtasks: Partial<Subtask>[] | null;\n    task_name: string | null;\n    task_type: TaskType | null;\n    transforms?: Partial<Transform>[] | null;\n    updated_at: string | null;\n    use_beam_search: boolean | null;\n    use_llm_cache: boolean | null;\n}\n\nexport interface UsageMetric {\n    application_id?: string;\n    date: string;\n    model_id?: string;\n    task_id?: string;\n    value: number;\n}\n\nexport type UsageMetricKey =\n    | \"volume\"\n    | \"input_tokens\"\n    | \"output_tokens\"\n    | \"error_4xx\"\n    | \"error_5xx\"\n    | \"latency\"\n    | \"volume_web_search\";\n\nexport type UsageData = {\n    [key in UsageMetricKey]: UsageMetric[];\n};\n\nexport enum FeatureFlagValues {\n    ENABLED = \"enabled\",\n    DISABLED = \"disabled\",\n}\n\nexport interface RefuelTeam {\n    created_at: string;\n    feature_flags: Record<string, FeatureFlagValues> | null;\n    name: string;\n    refuel_api_key: string;\n}\n\nexport enum UserState {\n    ACTIVE = \"ACTIVE\",\n    INVITED = \"INVITED\",\n    CREATED = \"CREATED\",\n}\n\nexport interface User {\n    name: string | null;\n    email: string;\n    team: string;\n    picture: string | null;\n    state: UserState;\n}\n\nexport interface AuthenticatedUser extends User {\n    id: string;\n    api_key: string | null;\n    created_at: string;\n    permissions: string[];\n    updated_at: string;\n    access_token: string;\n}\n\nexport interface InviteUsersResponse {\n    failed: string[];\n    success: string[];\n}\nexport interface TaxonomyLabel {\n    id: string;\n    name: string;\n    description: string;\n    level: number | null;\n    parents: string[];\n}\n\nexport interface TaxonomyLabelData {\n    name: string;\n    description?: string | null;\n}\n\nexport interface TaxonomyLabelRequestBody {\n    labels: TaxonomyLabelData[];\n}\n\nexport interface TaxonomyLabelsResponse {\n    id: string;\n    created_at: string;\n    labels: TaxonomyLabel[];\n    task_id: string;\n    total_count: number;\n    updated_at: string;\n}\n\nexport type IntegrationConfig = Record<string, string | null>;\n\nexport interface Integration {\n    id: string;\n    name: string;\n    category: string;\n    description: string;\n    is_connected: boolean;\n    is_available: boolean;\n    config: IntegrationConfig;\n    logo_url: string;\n}\n\nexport interface ExportDatasetOptions {\n    email?: string;\n    filters?: SQLFilter[];\n    includeLabels?: boolean;\n    includeUUID?: boolean;\n    taskId?: string;\n    taskRunId?: string;\n}\n\nexport interface ExportDatasetResponse {\n    export_id: string;\n    uri: string;\n}\n","import { Applications } from \"./Applications\";\nimport { DEFAULT_BASE_URL } from \"./consts\";\nimport { DatasetExports } from \"./DatasetExports\";\nimport { Datasets } from \"./Datasets\";\nimport { Integrations } from \"./Integrations\";\nimport { Projects } from \"./Projects\";\nimport { RefuelBase } from \"./RefuelBase\";\nimport { Tasks } from \"./Tasks\";\nimport { Taxonomies } from \"./Taxonomies\";\nimport { TaxonomyLabels } from \"./TaxonomyLabels\";\nimport { Team } from \"./Team\";\nimport { Usage } from \"./Usage\";\nimport { Users } from \"./Users\";\n\ninterface RefuelOptions {\n    baseUrl?: string;\n}\n\nexport class Refuel {\n    private base: RefuelBase;\n\n    public applications: Applications;\n    public datasets: Datasets;\n    public datasetExports: DatasetExports;\n    public integrations: Integrations;\n    public projects: Projects;\n    public tasks: Tasks;\n    public taxonomies: Taxonomies;\n    public taxonomyLabels: TaxonomyLabels;\n    public team: Team;\n    public usage: Usage;\n    public users: Users;\n\n    constructor(accessToken: string, options?: RefuelOptions) {\n        const baseUrl = options?.baseUrl || DEFAULT_BASE_URL;\n        this.base = new RefuelBase(accessToken, baseUrl);\n\n        this.applications = new Applications(this.base);\n        this.datasets = new Datasets(this.base);\n        this.datasetExports = new DatasetExports(this.base);\n        this.integrations = new Integrations(this.base);\n        this.projects = new Projects(this.base);\n        this.tasks = new Tasks(this.base);\n        this.taxonomies = new Taxonomies(this.base);\n        this.taxonomyLabels = new TaxonomyLabels(this.base);\n        this.team = new Team(this.base);\n        this.usage = new Usage(this.base);\n        this.users = new Users(this.base);\n    }\n}\n\nexport * from \"./types\";\n"],"names":[],"mappings":"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"}